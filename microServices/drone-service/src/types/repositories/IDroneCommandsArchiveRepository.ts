export interface IDroneCommandsArchiveRepository {
  create(data: any): Promise<any>;
  insert(data: any): Promise<any>;
  update(id: number, data: any): Promise<any>;
  delete(id: number): Promise<void>;
  findById(id: number): Promise<any>;
  selectById(id: number): Promise<any>;
  selectByDroneId(droneId: number, limit?: number): Promise<any[]>;
  selectByTimeRange(start: Date, end: Date, limit?: number): Promise<any[]>;
  selectByCommandType(commandType: string, limit?: number): Promise<any[]>;
  selectByStatus(status: string, limit?: number): Promise<any[]>;
  selectAll(limit?: number): Promise<any[]>;
  findByDroneId(droneId: number): Promise<any[]>;
  findByCommand(command: string): Promise<any[]>;
  findByCreatedBy(createdBy: number): Promise<any[]>;
  findByDateRange(start: Date, end: Date): Promise<any[]>;
  findByStatus(status: string): Promise<any[]>;
  findLatest(limit?: number): Promise<any[]>;
  findLatestByDroneId(droneId: number): Promise<any>;
  findByBatchId(batchId: string): Promise<any[]>;
  findByCommandType(commandType: string): Promise<any[]>;
  countByCommandType(commandType: string): Promise<number>;
  count(): Promise<number>;
  countByDroneId(droneId: number): Promise<number>;
  countByTimeRange(start: Date, end: Date): Promise<number>;
  countByBatchId(batchId: string): Promise<number>;
  findByExecutionTime(minTime: number, maxTime: number): Promise<any[]>;
  findSuccessfulCommands(): Promise<any[]>;
  findFailedCommands(): Promise<any[]>;
}