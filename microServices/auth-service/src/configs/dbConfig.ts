/**
 * @fileoverview Ë≥áÊñôÂ∫´ÈÖçÁΩÆÊ®°ÁµÑ
 * Ê≠§Ê®°ÁµÑÊèê‰æõ Sequelize ORM ÁöÑË≥áÊñôÂ∫´ÈÄ£Êé•ÈÖçÁΩÆÂíåÂØ¶‰æãÂª∫Á´ã
 * ÂåÖÂê´ Auth Ë™çË≠âÁõ∏ÈóúÊ®°ÂûãÁöÑÈÖçÁΩÆ
 */

// ÂåØÂÖ• Sequelize TypeScript ÁâàÊú¨Áî®Êñº ORM Êìç‰Ωú
import { Sequelize } from 'sequelize-typescript';
// ÂåØÂÖ•‰ΩøÁî®ËÄÖÊ®°ÂûãÁî®Êñº‰ΩøÁî®ËÄÖË≥áÊñôÁÆ°ÁêÜ
import { UserModel } from '../models/UserModel.js';
// Auth ÊúçÂãô‰∏ªË¶ÅËôïÁêÜÁî®Êà∂Ë™çË≠âÂíåÊúÉË©±ÁÆ°ÁêÜ

/**
 * Ë≥áÊñôÂ∫´ÈÖçÁΩÆ‰ªãÈù¢
 * ÂÆöÁæ©ÈÄ£Êé•Ë≥áÊñôÂ∫´ÊâÄÈúÄÁöÑÊâÄÊúâÂèÉÊï∏
 */
export interface DatabaseConfig {
  /** Ë≥áÊñôÂ∫´‰º∫ÊúçÂô®‰∏ªÊ©ü‰ΩçÂùÄ */
  host: string;
  /** Ë≥áÊñôÂ∫´ÂêçÁ®± */
  database: string;
  /** Ë≥áÊñôÂ∫´‰ΩøÁî®ËÄÖÂêçÁ®± */
  username: string;
  /** Ë≥áÊñôÂ∫´ÂØÜÁ¢º */
  password: string;
  /** Ë≥áÊñôÂ∫´ÈÄ£Êé•Âü†Ëôü */
  port: number;
  /** Ë≥áÊñôÂ∫´È°ûÂûãÔºåÊîØÊè¥Â§öÁ®ÆË≥áÊñôÂ∫´Á≥ªÁµ± */
  dialect: 'mysql' | 'postgres' | 'sqlite' | 'mariadb' | 'mssql';
  /** Êó•Ë™åË®òÈåÑË®≠ÂÆöÔºåÂèØ‰ª•ÊòØÂ∏ÉÊûóÂÄºÊàñËá™ÂÆöÁæ©Êó•Ë™åÂáΩÂºè */
  logging: boolean | ((sql: string) => void);
  /** Connection Pool ÈÖçÁΩÆ */
  pool: {
    /** ÈÄ£Êé•Ê±†‰∏≠ÊúÄÂ§ßÈÄ£Êé•Êï∏ */
    max: number;
    /** ÈÄ£Êé•Ê±†‰∏≠ÊúÄÂ∞èÈÄ£Êé•Êï∏ */
    min: number;
    /** ÈÄ£Êé•Á©∫ÈñíË∂ÖÊôÇÊôÇÈñìÔºàÊØ´ÁßíÔºâ */
    idle: number;
    /** Áç≤ÂèñÈÄ£Êé•ÁöÑË∂ÖÊôÇÊôÇÈñìÔºàÊØ´ÁßíÔºâ */
    acquire: number;
    /** ÈÄ£Êé•Ê±†È©ÖÈÄêÊ™¢Êü•ÈñìÈöîÔºàÊØ´ÁßíÔºâ */
    evict: number;
  };
  /** Êü•Ë©¢Ë∂ÖÊôÇÊôÇÈñìÔºàÊØ´ÁßíÔºâ */
  dialectOptions: {
    acquireTimeout: number;
    timeout: number;
    /** PostgreSQL ÁâπÂÆöÈÖçÁΩÆ */
    connectTimeout?: number;
    /** SSL ÈÖçÁΩÆ */
    ssl?: boolean;
  };
}

/**
 * ÂæÆÊúçÂãôÈ°ûÂûãÂÆöÁæ©
 */
type ServiceType = 'read-heavy' | 'write-heavy' | 'balanced';

/**
 * Áç≤ÂèñÁï∂ÂâçÂæÆÊúçÂãôÈ°ûÂûã
 * Ê†πÊìöÊúçÂãôÂêçÁ®±ÊàñÁí∞Â¢ÉËÆäÊï∏Á¢∫ÂÆöÊúçÂãôÈ°ûÂûã
 */
const getServiceType = (): ServiceType => {
  const serviceName = process.env.SERVICE_NAME || 'auth-service';
  
  // RBAC Âíå General Service ‰∏ªË¶ÅÊòØËÆÄÂèñÊìç‰ΩúÔºàÁî®Êà∂Êü•Ë©¢„ÄÅÊ¨äÈôêÊ™¢Êü•Ôºâ
  if (['rbac-service', 'general-service', 'auth-service'].includes(serviceName)) {
    return 'read-heavy';
  }
  
  // Drone Service ÊúâÂ§ßÈáèÂØ´ÂÖ•Êìç‰ΩúÔºà‰ΩçÁΩÆÊï∏Êìö„ÄÅÁãÄÊÖãÊõ¥Êñ∞Ôºâ
  if (['drone-service', 'drone-websocket-service'].includes(serviceName)) {
    return 'write-heavy';
  }
  
  // Gateway ÂíåÂÖ∂‰ªñÊúçÂãô‰øùÊåÅÂπ≥Ë°°
  return 'balanced';
};

/**
 * Áç≤ÂèñÈáùÂ∞ç‰∏çÂêåÊúçÂãôÈ°ûÂûãÂíåÁí∞Â¢ÉÁöÑÈÄ£Êé•Ê±†ÈÖçÁΩÆ
 * Ê†πÊìöÂæÆÊúçÂãôÁâπÊÄßÂíåÈÅãË°åÁí∞Â¢ÉÊèê‰æõÂÑ™ÂåñÁöÑÈÄ£Êé•Ê±†ÂèÉÊï∏
 */
const getPoolConfig = () => {
  const env = (process.env.NODE_ENV as 'production' | 'test' | 'development') || 'development';
  const serviceType = getServiceType();
  
  // Âü∫Á§éÈÖçÁΩÆ
  const baseConfigs = {
    production: {
      'read-heavy': {
        max: parseInt(process.env.DB_POOL_MAX || '15'), // ËÆÄÂèñÂØÜÈõÜÔºöËºÉÂ§öÈÄ£Êé•Áî®Êñº‰∏¶ÁôºÊü•Ë©¢
        min: parseInt(process.env.DB_POOL_MIN || '5'),  // ‰øùÊåÅË∂≥Â§†ÁöÑÊ¥ªË∫çÈÄ£Êé•
        idle: parseInt(process.env.DB_POOL_IDLE || '60000'), // 60ÁßíÁ©∫ÈñíË∂ÖÊôÇÔºàËÆÄÂèñÊìç‰ΩúËºÉÈ†ªÁπÅÔºâ
        acquire: parseInt(process.env.DB_POOL_ACQUIRE || '30000'), // 30ÁßíÁç≤ÂèñË∂ÖÊôÇ
        evict: parseInt(process.env.DB_POOL_EVICT || '1000'), // 1ÁßíÊ™¢Êü•ÈñìÈöî
      },
      'write-heavy': {
        max: parseInt(process.env.DB_POOL_MAX || '20'), // ÂØ´ÂÖ•ÂØÜÈõÜÔºöÊõ¥Â§öÈÄ£Êé•ËôïÁêÜÊâπÈáèÂØ´ÂÖ•
        min: parseInt(process.env.DB_POOL_MIN || '8'),  // ‰øùÊåÅËºÉÂ§öÊúÄÂ∞èÈÄ£Êé•
        idle: parseInt(process.env.DB_POOL_IDLE || '30000'), // 30ÁßíÁ©∫ÈñíË∂ÖÊôÇÔºàÂØ´ÂÖ•ÂæåÂø´ÈÄüÈáãÊîæÔºâ
        acquire: parseInt(process.env.DB_POOL_ACQUIRE || '15000'), // 15ÁßíÁç≤ÂèñË∂ÖÊôÇÔºàÂØ´ÂÖ•Ë¶ÅÊ±ÇÂø´ÈÄüÈüøÊáâÔºâ
        evict: parseInt(process.env.DB_POOL_EVICT || '500'), // 0.5ÁßíÊ™¢Êü•ÈñìÈöîÔºàÊõ¥È†ªÁπÅÁöÑÈÄ£Êé•ÁÆ°ÁêÜÔºâ
      },
      'balanced': {
        max: parseInt(process.env.DB_POOL_MAX || '12'), // Âπ≥Ë°°ÂûãÔºö‰∏≠Á≠âÈÄ£Êé•Êï∏
        min: parseInt(process.env.DB_POOL_MIN || '4'),  // ÈÅ©‰∏≠ÁöÑÊúÄÂ∞èÈÄ£Êé•
        idle: parseInt(process.env.DB_POOL_IDLE || '45000'), // 45ÁßíÁ©∫ÈñíË∂ÖÊôÇ
        acquire: parseInt(process.env.DB_POOL_ACQUIRE || '30000'), // 30ÁßíÁç≤ÂèñË∂ÖÊôÇ
        evict: parseInt(process.env.DB_POOL_EVICT || '1000'), // 1ÁßíÊ™¢Êü•ÈñìÈöî
      }
    },
    test: {
      'read-heavy': { max: 8, min: 2, idle: 10000, acquire: 15000, evict: 1000 },
      'write-heavy': { max: 10, min: 3, idle: 8000, acquire: 10000, evict: 500 },
      'balanced': { max: 6, min: 2, idle: 10000, acquire: 15000, evict: 1000 }
    },
    development: {
      'read-heavy': { max: 10, min: 3, idle: 45000, acquire: 30000, evict: 1000 },
      'write-heavy': { max: 12, min: 4, idle: 30000, acquire: 20000, evict: 1000 },
      'balanced': { max: 8, min: 2, idle: 40000, acquire: 30000, evict: 1000 }
    }
  };
  
  return baseConfigs[env]?.[serviceType] || baseConfigs.development.balanced;
};

/**
 * Áç≤ÂèñË≥áÊñôÂ∫´ÈÖçÁΩÆÁâ©‰ª∂
 * ÂæûÁí∞Â¢ÉËÆäÊï∏‰∏≠ËÆÄÂèñË≥áÊñôÂ∫´ÈÄ£Êé•ÂèÉÊï∏ÔºåÂ¶ÇÊûúÊú™Ë®≠ÂÆöÂâá‰ΩøÁî®È†êË®≠ÂÄº
 * ÂåÖÂê´ÂÑ™ÂåñÁöÑÈÄ£Êé•Ê±†ÈÖçÁΩÆ‰ª•ÊèêÂçáÊÄßËÉΩ
 * @returns {DatabaseConfig} ÂÆåÊï¥ÁöÑË≥áÊñôÂ∫´ÈÖçÁΩÆÁâ©‰ª∂
 */
export const getDatabaseConfig = (): DatabaseConfig => ({
  // ÂæûÁí∞Â¢ÉËÆäÊï∏Áç≤ÂèñË≥áÊñôÂ∫´‰∏ªÊ©ü‰ΩçÂùÄÔºådocker Áí∞Â¢É‰∏ã‰ΩøÁî®ÂÆπÂô®ÂêçÁ®±
  host: process.env.DB_HOST || 'aiot-postgres',
  // ÂæûÁí∞Â¢ÉËÆäÊï∏Áç≤ÂèñË≥áÊñôÂ∫´ÂêçÁ®±ÔºåÈ†êË®≠ÁÇ∫ main_dbÔºàAuth ‰ΩøÁî®‰∏ªË≥áÊñôÂ∫´Ôºâ
  database: process.env.DB_NAME || 'main_db',
  // ÂæûÁí∞Â¢ÉËÆäÊï∏Áç≤ÂèñË≥áÊñôÂ∫´‰ΩøÁî®ËÄÖÂêçÁ®±ÔºåÈ†êË®≠ÁÇ∫ admin
  username: process.env.DB_USER || 'admin',
  // ÂæûÁí∞Â¢ÉËÆäÊï∏Áç≤ÂèñË≥áÊñôÂ∫´ÂØÜÁ¢ºÔºåÈ†êË®≠ÁÇ∫ admin
  password: process.env.DB_PASSWORD || 'admin',
  // ÂæûÁí∞Â¢ÉËÆäÊï∏Áç≤ÂèñË≥áÊñôÂ∫´Âü†Ëôü‰∏¶ËΩâÊèõÁÇ∫Êï¥Êï∏ÔºåÈ†êË®≠ÁÇ∫ 5432ÔºàAuth Service Â∞àÁî®Ôºâ
  port: parseInt(process.env.DB_PORT || '5432'),
  // Ë®≠ÂÆöË≥áÊñôÂ∫´È°ûÂûãÁÇ∫ PostgreSQL
  dialect: 'postgres',
  // Ê†πÊìöÁí∞Â¢ÉË®≠ÂÆöÊó•Ë™åË®òÈåÑÔºöÈñãÁôºÁí∞Â¢ÉÈ°ØÁ§∫ SQL Êü•Ë©¢ÔºåÁîüÁî¢Áí∞Â¢ÉÈóúÈñâÊó•Ë™å
  logging: process.env.NODE_ENV === 'development' ? console.log : false,
  
  // === Connection Pool ÂÑ™ÂåñÈÖçÁΩÆ ===
  pool: getPoolConfig(),
  
  // === PostgreSQL ÁâπÂÆöÁöÑÂÑ™ÂåñÈÖçÁΩÆ ===
  dialectOptions: {
    // ÈÄ£Êé•Ë∂ÖÊôÇË®≠ÂÆö
    acquireTimeout: parseInt(process.env.DB_ACQUIRE_TIMEOUT || '60000'), // 60Áßí
    timeout: parseInt(process.env.DB_QUERY_TIMEOUT || '60000'), // 60ÁßíÊü•Ë©¢Ë∂ÖÊôÇ
    connectTimeout: parseInt(process.env.DB_CONNECT_TIMEOUT || '60000'), // 60ÁßíÈÄ£Êé•Ë∂ÖÊôÇ
    
    // PostgreSQL ÈÄ£Êé•ÈÖçÁΩÆ
    ssl: false, // ÈñãÁôºÁí∞Â¢É‰∏ç‰ΩøÁî® SSL
  },
});

/**
 * Âª∫Á´ã‰∏¶ÈÖçÁΩÆ Sequelize ÂØ¶‰æã
 * ‰ΩøÁî®Ë≥áÊñôÂ∫´ÈÖçÁΩÆÂª∫Á´ã Sequelize ÈÄ£Êé•ÂØ¶‰æãÔºå‰∏¶Ë®ªÂÜäÊâÄÊúâÊ®°Âûã
 * ÂåÖÂê´ÈÄ£Êé•Ê±†Áõ£ÊéßÂíåÂÅ•Â∫∑Ê™¢Êü•ÂäüËÉΩ
 * @returns {Sequelize} ÈÖçÁΩÆÂÆåÊàêÁöÑ Sequelize ÂØ¶‰æã
 */
export const createSequelizeInstance = (): Sequelize => {
  // Áç≤ÂèñË≥áÊñôÂ∫´ÈÖçÁΩÆ
  const config = getDatabaseConfig();

  // Âª∫Á´ãÊñ∞ÁöÑ Sequelize ÂØ¶‰æã‰∏¶ÈÖçÁΩÆ
  const sequelize = new Sequelize({
    // Â±ïÈñãË≥áÊñôÂ∫´ÈÖçÁΩÆÁâ©‰ª∂ÁöÑÊâÄÊúâÂ±¨ÊÄß
    ...config,
    // Ë®ªÂÜä Auth Service Áõ∏ÈóúÊ®°ÂûãÂà∞ Sequelize ÂØ¶‰æã‰∏≠
    models: [UserModel],
    
    // === ÂÖ∂‰ªñ Sequelize ÂÑ™ÂåñÈÖçÁΩÆ ===
    // ÂïüÁî®Êü•Ë©¢ÊïàËÉΩÂü∫Ê∫ñÊ∏¨Ë©¶ÔºàÂÉÖÈñãÁôºÁí∞Â¢ÉÔºâ
    benchmark: process.env.NODE_ENV === 'development',
    // ÈÖçÁΩÆÈáçË©¶Ê©üÂà∂ÔºàÈÅøÂÖçÈÄ£Êé•Ê±†ËÄóÁõ°Ôºâ
    retry: {
      max: 3,
      match: [
        /ETIMEDOUT/,
        /EHOSTUNREACH/,
        /ECONNRESET/,
        /ECONNREFUSED/,
        /EHOSTDOWN/,
        /ENETDOWN/,
        /ENETUNREACH/,
        /EAI_AGAIN/
      ]
    }
  });

  // === ÈÄ£Êé•Ê±†‰∫ã‰ª∂Áõ£ËÅΩ ===
  setupPoolEventListeners(sequelize);

  return sequelize;
};

/**
 * Ë®≠ÂÆöÈÄ£Êé•Ê±†‰∫ã‰ª∂Áõ£ËÅΩÂô®
 * Áõ£ÊéßÈÄ£Êé•Ê±†ÁãÄÊÖãÔºåË®òÈåÑÈáçË¶Å‰∫ã‰ª∂ÂíåÊÄßËÉΩÊåáÊ®ô
 * @param sequelize Sequelize ÂØ¶‰æã
 */
const setupPoolEventListeners = (sequelize: Sequelize): void => {
  const connectionManager = sequelize.connectionManager as any;
  const serviceName = process.env.SERVICE_NAME || 'unknown-service';
  const serviceType = getServiceType();
  
  if (connectionManager && connectionManager.pool && typeof connectionManager.pool.on === 'function') {
    // ÈÄ£Êé•Áç≤Âèñ‰∫ã‰ª∂ - Ë®òÈåÑÁç≤ÂèñÊôÇÈñìÂíåÊ±†ÁãÄÊÖã
    connectionManager.pool.on('acquire', (connection: any) => {
      const poolStats = getPoolStats(sequelize);
      if (process.env.NODE_ENV === 'development') {
        console.log(`üîó [${serviceName}:${serviceType}] Connection acquired: ${connection.threadId || connection.processID}`);
        console.log(`üìä Pool stats - Active: ${poolStats?.active}, Idle: ${poolStats?.idle}, Pending: ${poolStats?.pending}`);
      }
    });

    // ÈÄ£Êé•ÈáãÊîæ‰∫ã‰ª∂
    connectionManager.pool.on('release', (connection: any) => {
      if (process.env.NODE_ENV === 'development') {
        console.log(`üîì [${serviceName}:${serviceType}] Connection released: ${connection.threadId || connection.processID}`);
      }
    });

    // ÈÄ£Êé•ÂâµÂª∫‰∫ã‰ª∂ - ÈáçË¶ÅÔºÅË®òÈåÑÊñ∞ÈÄ£Êé•ÂâµÂª∫
    connectionManager.pool.on('create', (connection: any) => {
      const poolStats = getPoolStats(sequelize);
      console.log(`‚ú® [${serviceName}:${serviceType}] New connection created: ${connection.threadId || connection.processID}`);
      console.log(`üìà Pool size increased to: ${poolStats?.size}/${poolStats?.max}`);
    });

    // ÈÄ£Êé•Èä∑ÊØÄ‰∫ã‰ª∂ - Ë®òÈåÑÈÄ£Êé•Ê±†Êî∂Á∏Æ
    connectionManager.pool.on('destroy', (connection: any) => {
      const poolStats = getPoolStats(sequelize);
      console.log(`üíÄ [${serviceName}:${serviceType}] Connection destroyed: ${connection.threadId || connection.processID}`);
      console.log(`üìâ Pool size decreased to: ${poolStats?.size}/${poolStats?.max}`);
    });

    // ÈÄ£Êé•Ê±†ÈåØË™§‰∫ã‰ª∂ - ÈóúÈçµÈåØË™§Ë®òÈåÑ
    connectionManager.pool.on('error', (error: any) => {
      console.error(`‚ùå [${serviceName}:${serviceType}] Connection pool error:`, error);
      const poolStats = getPoolStats(sequelize);
      console.error(`üîç Pool debug info:`, poolStats);
    });

    // ÈÄ£Êé•Ë∂ÖÊôÇ‰∫ã‰ª∂ÔºàÂ¶ÇÊûúÊîØÊåÅÔºâ
    if (typeof connectionManager.pool.on === 'function') {
      connectionManager.pool.on('timeout', () => {
        console.warn(`‚è∞ [${serviceName}:${serviceType}] Connection pool timeout - consider increasing pool size`);
      });
    }
  }

  // ÂÆöÊúüË®òÈåÑÈÄ£Êé•Ê±†Áµ±Ë®àÔºàÂÉÖÂú®ÈñãÁôºÁí∞Â¢ÉÔºâ
  if (process.env.NODE_ENV === 'development') {
    setInterval(() => {
      const stats = getPoolStats(sequelize);
      if (stats && (stats.active > 0 || stats.pending > 0)) {
        console.log(`üìä [${serviceName}:${serviceType}] Pool Status:`, {
          active: stats.active,
          idle: stats.idle,
          pending: stats.pending,
          size: stats.size,
          utilization: `${Math.round((stats.active / stats.max) * 100)}%`
        });
      }
    }, 30000); // ÊØè30ÁßíË®òÈåÑ‰∏ÄÊ¨°
  }
};

/**
 * Áç≤ÂèñÈÄ£Êé•Ê±†Áµ±Ë®à‰ø°ÊÅØ
 * Áî®ÊñºÁõ£ÊéßÂíåÈô§ÈåØÈÄ£Êé•Ê±†ÁãÄÊÖã
 * @param sequelize Sequelize ÂØ¶‰æã
 * @returns ÈÄ£Êé•Ê±†Áµ±Ë®à‰ø°ÊÅØ
 */
export const getPoolStats = (sequelize: Sequelize) => {
  const connectionManager = sequelize.connectionManager as any;
  
  if (!connectionManager || !connectionManager.pool) {
    return null;
  }

  const pool = connectionManager.pool;
  
  return {
    // Áï∂ÂâçÊ¥ªË∫çÈÄ£Êé•Êï∏
    active: pool.using || 0,
    // Áï∂ÂâçÁ©∫ÈñíÈÄ£Êé•Êï∏  
    idle: pool.available || 0,
    // Á≠âÂæÖÈÄ£Êé•ÁöÑË´ãÊ±ÇÊï∏
    pending: pool.pending || 0,
    // ÈÄ£Êé•Ê±†Â§ßÂ∞è
    size: pool.size || 0,
    // ÊúÄÂ§ßÈÄ£Êé•Êï∏
    max: pool.options?.max || 0,
    // ÊúÄÂ∞èÈÄ£Êé•Êï∏
    min: pool.options?.min || 0,
    // Áï∂ÂâçÊôÇÈñìÊà≥
    timestamp: new Date().toISOString()
  };
};

/**
 * Ë≥áÊñôÂ∫´ÂÅ•Â∫∑Ê™¢Êü•
 * Ê™¢Êü•Ë≥áÊñôÂ∫´ÈÄ£Êé•ÁãÄÊÖãÂíåÈÄ£Êé•Ê±†ÂÅ•Â∫∑Â∫¶
 * @param sequelize Sequelize ÂØ¶‰æã
 * @returns ÂÅ•Â∫∑Ê™¢Êü•ÁµêÊûú
 */
export const healthCheck = async (sequelize: Sequelize) => {
  try {
    // Ê∏¨Ë©¶Ë≥áÊñôÂ∫´ÈÄ£Êé•
    await sequelize.authenticate();
    
    // Áç≤ÂèñÈÄ£Êé•Ê±†Áµ±Ë®à
    const poolStats = getPoolStats(sequelize);
    
    return {
      status: 'healthy',
      database: 'connected',
      poolStats,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    return {
      status: 'unhealthy',
      database: 'disconnected',
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    };
  }
};