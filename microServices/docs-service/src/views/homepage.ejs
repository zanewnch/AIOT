<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AIOT 系統文檔</title>
    <style>
        :root {
            --bg-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --container-bg: white;
            --text-color: #333;
            --text-secondary: #666;
            --card-bg: #f8f9fa;
            --border-color: #e9ecef;
            --info-bg: #e3f2fd;
            --info-border: #2196f3;
            --header-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --accent-color: #667eea;
        }
        
        [data-theme="dark"] {
            --bg-gradient: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            --container-bg: #2d3748;
            --text-color: #e2e8f0;
            --text-secondary: #a0aec0;
            --card-bg: #374151;
            --border-color: #4a5568;
            --info-bg: #2d3748;
            --info-border: #4299e1;
            --header-gradient: linear-gradient(135deg, #1a365d 0%, #2d3748 100%);
            --accent-color: #63b3ed;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: var(--text-color);
            background: var(--bg-gradient);
            min-height: 100vh;
            padding: 20px;
            transition: all 0.3s ease;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: var(--container-bg);
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
            transition: all 0.3s ease;
        }
        
        .header {
            background: var(--header-gradient);
            color: white;
            text-align: center;
            padding: 40px 20px;
            position: relative;
        }
        
        .theme-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255,255,255,0.2);
            border: none;
            border-radius: 25px;
            padding: 8px 16px;
            color: white;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .theme-toggle:hover {
            background: rgba(255,255,255,0.3);
            transform: scale(1.05);
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 300;
        }
        
        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .services {
            padding: 40px;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
        }
        
        .service-card {
            background: var(--card-bg);
            border-radius: 10px;
            padding: 25px;
            text-decoration: none;
            color: var(--text-color);
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }
        
        .service-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.15);
            border-color: var(--accent-color);
        }
        
        .service-card h3 {
            color: var(--accent-color);
            margin-bottom: 15px;
            font-size: 1.4em;
        }
        
        .service-card p {
            color: var(--text-secondary);
            margin-bottom: 15px;
        }
        
        .service-type {
            display: inline-block;
            background: var(--accent-color);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .footer {
            background: var(--card-bg);
            text-align: center;
            padding: 20px;
            color: var(--text-secondary);
            border-top: 1px solid var(--border-color);
        }
        
        .footer a {
            color: var(--accent-color);
            text-decoration: none;
            transition: opacity 0.3s ease;
        }
        
        .footer a:hover {
            opacity: 0.8;
        }
        
        .status-info {
            margin: 20px 40px;
            padding: 20px;
            background: var(--info-bg);
            border-radius: 8px;
            border-left: 4px solid var(--info-border);
            color: var(--text-color);
        }
        
        .loading-container {
            padding: 40px;
            text-align: center;
        }
        
        .loading-spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 4px solid var(--border-color);
            border-radius: 50%;
            border-top-color: var(--accent-color);
            animation: spin 1s ease-in-out infinite;
            margin-bottom: 20px;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .loading-steps {
            background: var(--card-bg);
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            text-align: left;
            max-height: 300px;
            overflow-y: auto;
        }
        
        .loading-step {
            padding: 8px 0;
            border-bottom: 1px solid var(--border-color);
            color: var(--text-secondary);
            transition: all 0.3s ease;
        }
        
        .loading-step:last-child {
            border-bottom: none;
        }
        
        .loading-step.active {
            color: var(--accent-color);
            font-weight: 500;
        }
        
        .loading-step.completed {
            color: var(--text-color);
            opacity: 0.7;
        }
        
        .error-message {
            background: #fee;
            border: 1px solid #fcc;
            color: #c33;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
        }
        
        .init-button {
            background: var(--accent-color);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-right: 10px;
        }
        
        .init-button:hover {
            background: #5a67d8;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }
        
        .init-button:disabled {
            background: var(--text-secondary);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .init-description {
            color: var(--text-secondary);
            font-size: 13px;
        }
        
        @media (max-width: 768px) {
            .services {
                grid-template-columns: 1fr;
                padding: 20px;
            }
            
            .header h1 {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <button class="theme-toggle" onclick="toggleTheme()">🌙 深色模式</button>
            <h1>AIOT 系統文檔</h1>
            <p>統一的微服務架構技術文檔中心</p>
        </div>
        
        <!-- 狀態信息 -->
        <div class="status-info">
            <strong>服務狀態:</strong> 正常運行 | 
            <strong>最後更新:</strong> <%= lastUpdated %> |
            <strong>版本:</strong> <%= version %>
            <% if (typeof showInitButton !== 'undefined' && showInitButton) { %>
            <div style="margin-top: 15px;">
                <button id="initButton" class="init-button" onclick="runInitialization()">
                    🔄 執行系統初始化
                </button>
                <span class="init-description">檢查和生成最新文檔</span>
            </div>
            <% } %>
        </div>

        <!-- Loading 容器（初始隱藏） -->
        <div class="loading-container" id="loadingContainer" style="display: none;">
            <div class="loading-spinner"></div>
            <h2>正在執行系統初始化...</h2>
            <p>請稍候，系統正在檢查和準備文檔內容</p>
            
            <div class="loading-steps" id="loadingSteps">
                <div class="loading-step active">🚀 開始初始化...</div>
            </div>
        </div>
        
        <!-- 服務列表 -->
        <div class="services" id="servicesContainer">
            <a href="/notepage" class="service-card">
                <h3>Note Card</h3>
                <p>簡單的筆記頁面</p>
                <span class="service-type">NOTE</span>
            </a>
            <% services.forEach(service => { %>
                <a href="<%= service.path %>" class="service-card">
                    <h3><%= service.name %></h3>
                    <p><%= service.description %></p>
                    <span class="service-type"><%= service.type %></span>
                </a>
            <% }) %>
        </div>
        
        <div class="footer">
            <p>&copy; 2025 AIOT Team. All rights reserved. | 
               <a href="/health">健康檢查</a> | 
               <a href="/info">服務資訊</a> | 
               <a href="/api/services">API</a>
            </p>
        </div>
    </div>
    
    <script>
        // 檢查用戶的主題偏好
        function getPreferredTheme() {
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme) {
                return savedTheme;
            }
            // 檢查系統偏好
            return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }
        
        // 設置主題
        function setTheme(theme) {
            document.documentElement.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
            
            const button = document.querySelector('.theme-toggle');
            if (theme === 'dark') {
                button.textContent = '☀️ 淺色模式';
            } else {
                button.textContent = '🌙 深色模式';
            }
        }
        
        // 切換主題
        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            setTheme(newTheme);
        }
        
        // 手動執行初始化
        async function runInitialization() {
            const initButton = document.getElementById('initButton');
            const loadingContainer = document.getElementById('loadingContainer');
            const loadingSteps = document.getElementById('loadingSteps');
            
            // 禁用按鈕，顯示載入畫面
            initButton.disabled = true;
            initButton.textContent = '⏳ 初始化中...';
            loadingContainer.style.display = 'block';
            
            // 重置步驟顯示
            loadingSteps.innerHTML = '<div class="loading-step active">🚀 開始初始化...</div>';
            
            try {
                const response = await fetch('/load-content');
                const result = await response.json();
                
                if (result.success) {
                    const data = result.data;
                    
                    // 實時顯示步驟
                    if (data.generationInfo && data.generationInfo.steps) {
                        loadingSteps.innerHTML = '';
                        data.generationInfo.steps.forEach((step, index) => {
                            const stepDiv = document.createElement('div');
                            stepDiv.className = 'loading-step completed';
                            stepDiv.textContent = step;
                            loadingSteps.appendChild(stepDiv);
                        });
                    }
                    
                    // 顯示完成狀態
                    setTimeout(() => {
                        loadingContainer.style.display = 'none';
                        initButton.disabled = false;
                        initButton.textContent = '✅ 初始化完成';
                        
                        // 3秒後恢復按鈕原狀
                        setTimeout(() => {
                            initButton.textContent = '🔄 執行系統初始化';
                        }, 3000);
                    }, 1500);
                    
                } else {
                    // 顯示錯誤
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'error-message';
                    errorDiv.innerHTML = `
                        <h3>初始化失敗</h3>
                        <p>錯誤訊息: ${result.error}</p>
                        <button onclick="runInitialization()">重試</button>
                    `;
                    loadingContainer.appendChild(errorDiv);
                    
                    initButton.disabled = false;
                    initButton.textContent = '❌ 初始化失敗';
                    setTimeout(() => {
                        initButton.textContent = '🔄 執行系統初始化';
                    }, 3000);
                }
                
            } catch (error) {
                console.error('初始化失敗:', error);
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                errorDiv.innerHTML = `
                    <h3>網路錯誤</h3>
                    <p>無法連接到服務器，請檢查網路連接</p>
                    <button onclick="runInitialization()">重試</button>
                `;
                loadingContainer.appendChild(errorDiv);
                
                initButton.disabled = false;
                initButton.textContent = '❌ 連接失敗';
                setTimeout(() => {
                    initButton.textContent = '🔄 執行系統初始化';
                }, 3000);
            }
        }
        
        // 初始化主題
        document.addEventListener('DOMContentLoaded', function() {
            const preferredTheme = getPreferredTheme();
            setTheme(preferredTheme);
        });
        
        // 監聽系統主題變化
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(e) {
            if (!localStorage.getItem('theme')) {
                setTheme(e.matches ? 'dark' : 'light');
            }
        });
    </script>
</body>
</html>