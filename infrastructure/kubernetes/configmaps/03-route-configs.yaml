apiVersion: v1
kind: ConfigMap
metadata:
  name: route-configs
  namespace: aiot-prod
  labels:
    app.kubernetes.io/name: route-configs
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: aiot-microservices
data:
  kong-main.yaml: |
    # ==============================================
    # Kong Gateway 聲明式配置 - AIOT 微服務架構
    # ==============================================
    # 
    # 配置說明：
    # • 此文件整合了所有 Kong Gateway 配置
    # • 支援 AIOT 微服務架構的 API Gateway 需求
    # • 包含服務發現、路由、插件等完整配置
    # 
    # 架構概覽：
    # Kong Gateway → 各微服務
    # • /api/auth → RBAC 服務 (gRPC)
    # • /api/rbac → RBAC 服務 (gRPC) 
    # • /api/drone → Drone 服務 (gRPC)
    # • /socket.io → Drone WebSocket 服務 (HTTP + WebSocket 升級)
    # • /api/general → General 服務 (gRPC)
    # • /api/llm → LLM 服務 (gRPC)
    # • /docs → 文檔服務 (HTTP)
    # • / → 重定向到文檔服務
    #
    # 網路配置：
    # • 使用 Docker Compose 服務名稱進行內部通訊
    # • 所有服務都在 aiot-network 網路中
    # • Kong 透過 Docker 內建 DNS 解析服務名稱

    _format_version: "3.0"

    # ==============================================
    # 🔧 服務定義 (Services)
    # ==============================================

    services:
      # 🔐 RBAC 微服務 - 使用 gRPC 協議進行內部通訊
      - name: rbac-grpc-service
        protocol: grpc
        host: rbac-service
        port: 50051
        connect_timeout: 60000
        write_timeout: 60000
        read_timeout: 60000
        retries: 5
        tags:
          - auth
          - rbac
          - microservice
          - http

      # 🚁 Drone API 微服務 - 使用 gRPC 協議處理 API 請求
      - name: drone-grpc-service
        protocol: grpc
        host: drone-service
        port: 50052
        connect_timeout: 60000
        write_timeout: 60000
        read_timeout: 60000
        retries: 5
        tags:
          - drone
          - api
          - grpc

      # 📡 Drone WebSocket 微服務 - 專門處理 WebSocket 連線（透過 HTTP 升級機制）
      - name: drone-websocket-service
        protocol: http
        host: drone-websocket-service
        port: 3004
        connect_timeout: 60000
        write_timeout: 60000
        read_timeout: 60000
        retries: 5
        tags:
          - drone
          - websocket
          - realtime

      # ⚙️ General 微服務 - 使用 gRPC 協議
      - name: general-service
        protocol: grpc
        host: general-service
        port: 50053
        connect_timeout: 60000
        write_timeout: 60000
        read_timeout: 60000
        retries: 5
        tags:
          - general
          - documentation
          - grpc

      # 📚 文檔服務 - 統一管理所有微服務的 TypeDoc 文檔
      - name: docs-service
        protocol: http
        host: docs-service
        port: 3005
        connect_timeout: 60000
        write_timeout: 60000
        read_timeout: 60000
        retries: 5
        tags:
          - documentation
          - typedoc
          - static
          - http

      # 🤖 LLM 微服務 - 使用 HTTP 協議提供 AI/LLM 功能 (Django)
      - name: llm-service
        protocol: http
        host: llm-service
        port: 8020
        connect_timeout: 60000
        write_timeout: 60000
        read_timeout: 60000
        retries: 5
        tags:
          - llm
          - ai
          - microservice
          - django
          - http

    # ==============================================
    # 🛣️ 路由定義 (Routes)
    # ==============================================

    routes:
      # 🔐 RBAC 認證路由 - 支援 HTTP/HTTPS
      - name: rbac-auth-routes
        service: rbac-grpc-service
        paths:
          - /api/auth
        strip_path: true  # 移除路徑前綴，轉發乾淨路徑給微服務
        preserve_host: false
        protocols:
          - http
          - https
        tags:
          - auth
          - login
          - gateway-only

      # 🔐 RBAC 管理路由 - 支援 HTTP/HTTPS
      - name: rbac-routes
        service: rbac-grpc-service
        paths:
          - /api/rbac
        strip_path: true   # 移除 /api/rbac 前綴
        preserve_host: false
        protocols:
          - http
          - https
        tags:
          - rbac
          - permissions
          - gateway-only

      # 🚁 Drone API 路由 - 支援 HTTP/HTTPS，連接到 gRPC 服務
      - name: drone-api-routes
        service: drone-grpc-service
        paths:
          - /api/drone
        strip_path: true   # 移除 /api/drone 前綴
        preserve_host: false
        protocols:
          - http
          - https
        tags:
          - drone
          - api
          - gateway-only
          - grpc

      # 📡 Drone WebSocket 路由 - 支援 HTTP/HTTPS（WebSocket 通過 HTTP 升級機制）
      - name: drone-websocket-routes
        service: drone-websocket-service
        paths:
          - /socket.io
        strip_path: false   # 保持 /socket.io 路徑，WebSocket 需要完整路徑
        preserve_host: false
        protocols:
          - http
          - https
        tags:
          - drone
          - websocket
          - realtime
          - gateway-only

      # ⚙️ General 文檔路由 - 支援 HTTP/HTTPS
      - name: general-docs-routes
        service: general-service
        paths:
          - /api/docs
        strip_path: true   # 移除 /api/docs 前綴，轉發 / 給微服務
        preserve_host: false
        protocols:
          - http
          - https
        tags:
          - general
          - documentation
          - gateway-only
          
      # ⚙️ General API 路由 - 支援 HTTP/HTTPS  
      - name: general-api-routes
        service: general-service
        paths:
          - /api/general
        strip_path: true   # 移除 /api/general 前綴，轉發 / 給微服務
        preserve_host: false
        protocols:
          - http
          - https
        tags:
          - general
          - documentation
          - gateway-only

      # 💊 健康檢查路由 - 內部使用，僅 HTTP
      - name: health-check-routes
        service: general-service
        paths:
          - /health
        strip_path: true   # 移除 /health 前綴
        preserve_host: false
        protocols:
          - http
        tags:
          - health
          - internal

      # 📚 文檔服務路由 - 統一的 TypeDoc 文檔入口
      - name: docs-service-routes
        service: docs-service
        paths:
          - /docs
        strip_path: true   # 移除 /docs 前綴，轉發乾淨路徑給文檔服務
        preserve_host: false
        protocols:
          - http
          - https
        tags:
          - documentation
          - typedoc
          - static
          - gateway-only

      # 🤖 LLM API 路由 - 支援 HTTP/HTTPS，連接到 Django 服務
      - name: llm-api-routes
        service: llm-service
        paths:
          - /api/llm
        strip_path: true   # 移除 /api/llm 前綴，轉發 /api/ 給 Django
        preserve_host: false
        protocols:
          - http
          - https
        tags:
          - llm
          - ai
          - api
          - gateway-only
          - django

      # 🏠 根路徑路由 - 重定向到文檔頁面
      - name: root-route
        service: docs-service
        paths:
          - /
        strip_path: false  # 保持根路徑
        preserve_host: false
        protocols:
          - http
          - https
        tags:
          - root
          - documentation

    # ==============================================
    # 🔌 插件配置 (Plugins)
    # ==============================================
    # 
    # 目前使用預設插件配置
    # 如需啟用特定插件（如認證、限流等），在此處配置

    plugins: []

    # ==============================================
    # 🎯 上游服務配置 (Upstreams)
    # ==============================================
    # 
    # 目前使用直接服務連接
    # 如需負載平衡或服務發現，在此處配置

    upstreams: []

    # ==============================================
    # 👤 消費者配置 (Consumers)  
    # ==============================================
    #
    # 目前不需要認證消費者
    # 如需 API Key 或 JWT 認證，在此處配置

    consumers: []

  kong-k8s.yaml: |
    # Kong API Gateway Kubernetes 配置
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: kong-deployment
      namespace: aiot-prod
      labels:
        app: kong
        app.kubernetes.io/name: kong
        app.kubernetes.io/component: api-gateway
        app.kubernetes.io/part-of: aiot-microservices
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: kong
      template:
        metadata:
          labels:
            app: kong
        spec:
          containers:
          - name: kong
            image: kong:3.4
            ports:
            - containerPort: 8000
              name: proxy
            - containerPort: 8443
              name: proxy-ssl
            - containerPort: 8001
              name: admin
            - containerPort: 8444
              name: admin-ssl
            env:
            - name: KONG_DATABASE
              value: "off"
            - name: KONG_DECLARATIVE_CONFIG
              value: "/kong/kong.yaml"
            - name: KONG_PROXY_ACCESS_LOG
              value: "/dev/stdout"
            - name: KONG_ADMIN_ACCESS_LOG
              value: "/dev/stdout"
            - name: KONG_PROXY_ERROR_LOG
              value: "/dev/stderr"
            - name: KONG_ADMIN_ERROR_LOG
              value: "/dev/stderr"
            - name: KONG_ADMIN_LISTEN
              value: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
            - name: KONG_PLUGINS
              value: "bundled"
            # 移除自定義 DNS 解析器，使用 Kubernetes 默認
            volumeMounts:
            - name: kong-config
              mountPath: /kong
              readOnly: true
            - name: kong-protos
              mountPath: /kong/protos
              readOnly: true
            livenessProbe:
              exec:
                command:
                - kong
                - health
              initialDelaySeconds: 30
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /status
                port: 8001
              initialDelaySeconds: 10
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 3
            resources:
              requests:
                memory: "512Mi"
                cpu: "300m"
              limits:
                memory: "1Gi"
                cpu: "600m"
          volumes:
          - name: kong-config
            configMap:
              name: kong-config
          - name: kong-protos
            configMap:
              name: kong-protos
          restartPolicy: Always

    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: kong-service
      namespace: aiot-prod
      labels:
        app: kong
        app.kubernetes.io/name: kong
        app.kubernetes.io/component: api-gateway
    spec:
      selector:
        app: kong
      ports:
      - port: 8000
        targetPort: 8000
        protocol: TCP
        name: proxy
      - port: 8443
        targetPort: 8443
        protocol: TCP
        name: proxy-ssl
      - port: 8001
        targetPort: 8001
        protocol: TCP
        name: admin
      - port: 8444
        targetPort: 8444
        protocol: TCP
        name: admin-ssl
      type: ClusterIP

    ---
    # Kong 對外暴露服務 (LoadBalancer 或 NodePort)
    apiVersion: v1
    kind: Service
    metadata:
      name: kong-external-service
      namespace: aiot-prod
      labels:
        app: kong
        app.kubernetes.io/name: kong
        app.kubernetes.io/component: api-gateway-external
    spec:
      selector:
        app: kong
      ports:
      - port: 8000
        targetPort: 8000
        protocol: TCP
        name: proxy
        nodePort: 30000
      - port: 8001
        targetPort: 8001
        protocol: TCP
        name: admin
        nodePort: 30001
      type: NodePort

  consul-main.json: |
    {
      "datacenter": "dc1",
      "data_dir": "/consul/data",
      "log_level": "INFO",
      "node_name": "consul-server",
      "bind_addr": "0.0.0.0",
      "client_addr": "0.0.0.0",
      "retry_join": ["consul"],
      "server": true,
      "bootstrap_expect": 1,
      "ui_config": {
        "enabled": true
      },
      "connect": {
        "enabled": true
      },
      "ports": {
        "grpc": 8502
      },
      "acl": {
        "enabled": false,
        "default_policy": "allow",
        "enable_token_persistence": true
      },
      "performance": {
        "raft_multiplier": 1
      },
      "autopilot": {
        "cleanup_dead_servers": true,
        "last_contact_threshold": "200ms",
        "max_trailing_logs": 250,
        "server_stabilization_time": "10s",
        "disable_upgrade_migration": false
      }
    }

  consul-k8s.yaml: |
    # Consul 服務發現 Kubernetes 配置
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: consul-deployment
      namespace: aiot-prod
      labels:
        app: consul
        app.kubernetes.io/name: consul
        app.kubernetes.io/component: service-discovery
        app.kubernetes.io/part-of: aiot-microservices
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: consul
      template:
        metadata:
          labels:
            app: consul
        spec:
          containers:
          - name: consul
            image: consul:1.15
            ports:
            - containerPort: 8500
              name: http-api
            - containerPort: 8600
              name: dns
              protocol: UDP
            env:
            - name: CONSUL_BIND_INTERFACE
              value: "eth0"
            volumeMounts:
            - name: consul-storage
              mountPath: /consul/data
            - name: consul-config
              mountPath: /consul/config/consul.json
              subPath: consul.json
              readOnly: true
            - name: consul-services
              mountPath: /consul/config/services
              readOnly: true
            livenessProbe:
              exec:
                command:
                - consul
                - members
              initialDelaySeconds: 30
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /v1/status/leader
                port: 8500
              initialDelaySeconds: 10
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 3
            resources:
              requests:
                memory: "256Mi"
                cpu: "200m"
              limits:
                memory: "512Mi"
                cpu: "400m"
          volumes:
          - name: consul-storage
            persistentVolumeClaim:
              claimName: consul-pvc
          - name: consul-config
            configMap:
              name: consul-config
          - name: consul-services
            configMap:
              name: consul-services
          restartPolicy: Always

    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: consul-service
      namespace: aiot-prod
      labels:
        app: consul
        app.kubernetes.io/name: consul
        app.kubernetes.io/component: service-discovery
    spec:
      selector:
        app: consul
      ports:
      - port: 8500
        targetPort: 8500
        protocol: TCP
        name: http-api
      - port: 8600
        targetPort: 8600
        protocol: UDP
        name: dns
      type: ClusterIP

  consul-rbac-service.json: |
    {
      "service": {
        "id": "rbac-service",
        "name": "rbac-service",
        "tags": [
          "auth",
          "rbac",
          "microservice",
          "nodejs",
          "express"
        ],
        "address": "rbac-service",
        "port": 50051,
        "meta": {
          "version": "1.0.0",
          "env": "development",
          "protocols": "grpc"
        },
        "check": {
          "id": "rbac-service-health",
          "name": "RBAC Service Health Check",
          "grpc": "rbac-service:50051",
          "interval": "10s",
          "timeout": "3s",
          "deregister_critical_service_after": "30s"
        },
        "checks": [
          {
            "id": "rbac-service-api",
            "name": "RBAC API Check",
            "grpc": "rbac-service:50051",
            "interval": "30s",
            "timeout": "5s"
          },
          {
            "id": "rbac-service-grpc",
            "name": "RBAC gRPC Check",
            "grpc": "rbac-service:50051",
            "interval": "30s",
            "timeout": "5s"
          }
        ],
        "weights": {
          "passing": 10,
          "warning": 1
        }
      }
    }

  consul-drone-service.json: |
    {
      "service": {
        "id": "drone-service",
        "name": "drone-service",
        "tags": [
          "drone",
          "iot",
          "api",
          "microservice",
          "nodejs",
          "grpc"
        ],
        "address": "drone-service",
        "port": 50052,
        "meta": {
          "version": "1.0.0",
          "env": "development",
          "protocols": "grpc"
        },
        "check": {
          "id": "drone-service-grpc",
          "name": "Drone gRPC Health Check",
          "grpc": "drone-service:50052",
          "interval": "10s",
          "timeout": "3s",
          "deregister_critical_service_after": "30s"
        },
        "checks": [
          {
            "id": "drone-service-grpc-health",
            "name": "Drone gRPC Health Check",
            "grpc": "drone-service:50052",
            "interval": "30s",
            "timeout": "5s"
          }
        ],
        "weights": {
          "passing": 10,
          "warning": 1
        }
      }
    }