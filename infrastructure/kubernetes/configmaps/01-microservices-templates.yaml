# 統一微服務模板 ConfigMaps
# 按照CLAUDE.md第127-153行統一模式實現

---
# Node.js 微服務通用模板
apiVersion: v1
kind: ConfigMap
metadata:
  name: nodejs-service-template
  namespace: aiot-prod
data:
  # 通用 package.json
  package.json: |
    {
      "name": "microservice-template",
      "version": "1.0.0",
      "type": "module",
      "scripts": {
        "start": "node --import tsx/esm src/server.ts",
        "dev": "nodemon --exec \"node --import tsx/esm\" src/server.ts",
        "build": "tsc"
      },
      "dependencies": {
        "@grpc/grpc-js": "^1.9.0",
        "@grpc/proto-loader": "^0.7.8",
        "cors": "^2.8.5",
        "express": "^4.21.2",
        "tsx": "^4.19.2",
        "typescript": "^5.0.0"
      },
      "devDependencies": {
        "nodemon": "^3.0.0"
      }
    }
  
  # 通用 nodemon.json
  nodemon.json: |
    {
      "watch": ["src"],
      "ext": "ts,js,json",
      "ignore": ["node_modules", "dist"],
      "exec": "node --import tsx/esm src/server.ts",
      "env": {
        "NODE_ENV": "development"
      }
    }

  # 通用 tsconfig.json
  tsconfig.json: |
    {
      "compilerOptions": {
        "target": "ES2022",
        "module": "ESNext",
        "moduleResolution": "node",
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "strict": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "outDir": "./dist",
        "rootDir": "./src",
        "declaration": true,
        "declarationMap": true,
        "sourceMap": true
      },
      "include": ["src/**/*"],
      "exclude": ["node_modules", "dist"]
    }

  # 開發模式佔位符
  src-placeholder: |
    // Microservice placeholder - 真實源代碼由容器內同步
    console.log("Microservice starting in development mode with hot-reload");
    process.exit(0);

---
# WebSocket 微服務專用模板（例如 drone-websocket-service）
apiVersion: v1
kind: ConfigMap
metadata:
  name: websocket-service-template
  namespace: aiot-prod
data:
  # WebSocket 服務 package.json
  package.json: |
    {
      "name": "websocket-service-template",
      "version": "1.0.0",
      "type": "module",
      "scripts": {
        "start": "node --import tsx/esm src/server.ts",
        "dev": "nodemon --exec \"node --import tsx/esm\" src/server.ts",
        "build": "tsc"
      },
      "dependencies": {
        "express": "^4.21.2",
        "socket.io": "^4.7.5",
        "cors": "^2.8.5",
        "tsx": "^4.19.2",
        "typescript": "^5.0.0"
      },
      "devDependencies": {
        "nodemon": "^3.0.0"
      }
    }

  # 通用 nodemon.json
  nodemon.json: |
    {
      "watch": ["src"],
      "ext": "ts,js,json",
      "ignore": ["node_modules", "dist"],
      "exec": "node --import tsx/esm src/server.ts",
      "env": {
        "NODE_ENV": "development"
      }
    }

  # 通用 tsconfig.json
  tsconfig.json: |
    {
      "compilerOptions": {
        "target": "ES2022",
        "module": "ESNext",
        "moduleResolution": "node",
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "strict": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "outDir": "./dist",
        "rootDir": "./src",
        "declaration": true,
        "declarationMap": true,
        "sourceMap": true
      },
      "include": ["src/**/*"],
      "exclude": ["node_modules", "dist"]
    }

  # WebSocket 開發模式佔位符
  src-placeholder: |
    // WebSocket Service placeholder - 真實源代碼由容器內同步
    console.log("WebSocket Service starting in development mode with hot-reload");
    process.exit(0);

---
# Django 微服務專用模板（例如 llm-service）
apiVersion: v1
kind: ConfigMap
metadata:
  name: django-service-template
  namespace: aiot-prod
data:
  # Django requirements.txt
  requirements.txt: |
    Django==4.2.7
    djangorestframework==3.14.0
    django-cors-headers==4.3.1
    psycopg2-binary==2.9.9
    python-dotenv==1.0.0
  
  # Django manage.py
  manage.py: |
    #!/usr/bin/env python
    import os
    import sys
    
    if __name__ == '__main__':
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'llm.settings')
        try:
            from django.core.management import execute_from_command_line
        except ImportError as exc:
            raise ImportError(
                "Couldn't import Django. Are you sure it's installed and "
                "available on your PYTHONPATH environment variable? Did you "
                "forget to activate a virtual environment?"
            ) from exc
        execute_from_command_line(sys.argv)

  # Django 基本 settings.py
  settings.py: |
    import os
    from pathlib import Path
    
    BASE_DIR = Path(__file__).resolve().parent.parent
    
    SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'dev-secret-key')
    DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'
    ALLOWED_HOSTS = ['*']
    
    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'rest_framework',
        'corsheaders',
    ]
    
    MIDDLEWARE = [
        'corsheaders.middleware.CorsMiddleware',
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]
    
    ROOT_URLCONF = 'llm.urls'
    WSGI_APPLICATION = 'llm.wsgi.application'
    
    # Django development placeholder
    print("Django service starting in development mode with hot-reload")

---
# Docs 服務專用模板（包含EJS支援）
apiVersion: v1
kind: ConfigMap
metadata:
  name: docs-service-template
  namespace: aiot-prod
data:
  # Docs 服務 package.json
  package.json: |
    {
      "name": "docs-service",
      "version": "1.0.0",
      "type": "module",
      "scripts": {
        "start": "node --import tsx/esm src/server.ts",
        "dev": "nodemon --exec \"node --import tsx/esm\" src/server.ts",
        "build": "tsc"
      },
      "dependencies": {
        "@types/ejs": "^3.1.5",
        "cors": "^2.8.5",
        "ejs": "^3.1.10",
        "express": "^4.21.2",
        "serve-static": "^1.15.0",
        "tsx": "^4.19.2",
        "typescript": "^5.0.0"
      },
      "devDependencies": {
        "nodemon": "^3.0.0"
      }
    }

  # 通用 nodemon.json
  nodemon.json: |
    {
      "watch": ["src"],
      "ext": "ts,js,json,ejs",
      "ignore": ["node_modules", "dist"],
      "exec": "node --import tsx/esm src/server.ts",
      "env": {
        "NODE_ENV": "development"
      }
    }

  # 通用 tsconfig.json
  tsconfig.json: |
    {
      "compilerOptions": {
        "target": "ES2022",
        "module": "ESNext",
        "moduleResolution": "node",
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "strict": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "outDir": "./dist",
        "rootDir": "./src",
        "declaration": true,
        "declarationMap": true,
        "sourceMap": true
      },
      "include": ["src/**/*"],
      "exclude": ["node_modules", "dist"]
    }