_format_version: "3.0"

plugins:
  # gRPC-Gateway 插件 - RBAC 服務
  - name: grpc-gateway
    service: rbac-service
    config:
      proto: protos/rbac.proto
    tags:
      - grpc-gateway
      - rbac

  # gRPC-Gateway 插件 - Drone 服務
  - name: grpc-gateway
    service: drone-grpc-service
    config:
      proto: |
        syntax = "proto3";
        
        package drone;
        
        import "google/api/annotations.proto";
        
        service DroneService {
          rpc GetDroneStatuses(GetDroneStatusesRequest) returns (GetDroneStatusesResponse) {
            option (google.api.http) = {
              get: "/api/drone/statuses"
            };
          }
          rpc CreateDroneStatus(CreateDroneStatusRequest) returns (CreateDroneStatusResponse) {
            option (google.api.http) = {
              post: "/api/drone/statuses"
              body: "*"
            };
          }
          rpc GetDronePositions(GetDronePositionsRequest) returns (GetDronePositionsResponse) {
            option (google.api.http) = {
              get: "/api/drone/positions"
            };
          }
          rpc CreateDroneCommand(CreateDroneCommandRequest) returns (CreateDroneCommandResponse) {
            option (google.api.http) = {
              post: "/api/drone/commands"
              body: "*"
            };
          }
        }
        
        message GetDroneStatusesRequest {
          int32 page = 1;
          int32 limit = 2;
          string drone_id = 3;
        }
        
        message GetDroneStatusesResponse {
          repeated DroneStatus statuses = 1;
          int32 total = 2;
          bool success = 3;
          string message = 4;
        }
        
        message CreateDroneStatusRequest {
          string drone_id = 1;
          string status = 2;
          string battery_level = 3;
        }
        
        message CreateDroneStatusResponse {
          DroneStatus status = 1;
          bool success = 2;
          string message = 3;
        }
        
        message GetDronePositionsRequest {
          int32 page = 1;
          int32 limit = 2;
          string drone_id = 3;
        }
        
        message GetDronePositionsResponse {
          repeated DronePosition positions = 1;
          int32 total = 2;
          bool success = 3;
          string message = 4;
        }
        
        message CreateDroneCommandRequest {
          string drone_id = 1;
          string command_type = 2;
          string parameters = 3;
        }
        
        message CreateDroneCommandResponse {
          DroneCommand command = 1;
          bool success = 2;
          string message = 3;
        }
        
        message DroneStatus {
          int32 id = 1;
          string drone_id = 2;
          string status = 3;
          string battery_level = 4;
          string created_at = 5;
        }
        
        message DronePosition {
          int32 id = 1;
          string drone_id = 2;
          double latitude = 3;
          double longitude = 4;
          double altitude = 5;
          string timestamp = 6;
        }
        
        message DroneCommand {
          int32 id = 1;
          string drone_id = 2;
          string command_type = 3;
          string parameters = 4;
          string status = 5;
          string created_at = 6;
        }
    tags:
      - grpc-gateway
      - drone

  # gRPC-Gateway 插件 - General 服務 (原 FeSetting 服務)
  - name: grpc-gateway
    service: general-service
    config:
      proto: |
        syntax = "proto3";
        
        package general;
        
        import "google/api/annotations.proto";
        
        service GeneralService {
          // 健康檢查端點
          rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
            option (google.api.http) = {
              get: "/api/health"
            };
          }
          
          // 服務資訊端點
          rpc GetServiceInfo(ServiceInfoRequest) returns (ServiceInfoResponse) {
            option (google.api.http) = {
              get: "/api/info"
            };
          }
          
          // 使用者偏好設定管理
          rpc GetUserPreferences(GetUserPreferencesRequest) returns (GetUserPreferencesResponse) {
            option (google.api.http) = {
              get: "/api/user-preferences"
            };
          }
          rpc CreateUserPreference(CreateUserPreferenceRequest) returns (CreateUserPreferenceResponse) {
            option (google.api.http) = {
              post: "/api/user-preferences"
              body: "*"
            };
          }
          rpc UpdateUserPreference(UpdateUserPreferenceRequest) returns (UpdateUserPreferenceResponse) {
            option (google.api.http) = {
              put: "/api/user-preferences/{preference_id}"
              body: "*"
            };
          }
          rpc DeleteUserPreference(DeleteUserPreferenceRequest) returns (DeleteUserPreferenceResponse) {
            option (google.api.http) = {
              delete: "/api/user-preferences/{preference_id}"
            };
          }
        }
        
        // 健康檢查相關訊息
        message HealthCheckRequest {}
        
        message HealthCheckResponse {
          string status = 1;
          string service = 2;
          string message = 3;
          string timestamp = 4;
          string version = 5;
        }
        
        message ServiceInfoRequest {}
        
        message ServiceInfoResponse {
          string service = 1;
          string description = 2;
          string version = 3;
          string author = 4;
          repeated string features = 5;
        }
        
        // 使用者偏好設定相關訊息
        message GetUserPreferencesRequest {
          int32 user_id = 1;
          string category = 2;
          int32 page = 3;
          int32 limit = 4;
        }
        
        message GetUserPreferencesResponse {
          repeated UserPreference preferences = 1;
          int32 total = 2;
          bool success = 3;
          string message = 4;
        }
        
        message CreateUserPreferenceRequest {
          int32 user_id = 1;
          string preference_key = 2;
          string preference_value = 3;
          string category = 4;
          string description = 5;
        }
        
        message CreateUserPreferenceResponse {
          UserPreference preference = 1;
          bool success = 2;
          string message = 3;
        }
        
        message UpdateUserPreferenceRequest {
          int32 preference_id = 1;
          string preference_value = 2;
          string category = 3;
          string description = 4;
        }
        
        message UpdateUserPreferenceResponse {
          UserPreference preference = 1;
          bool success = 2;
          string message = 3;
        }
        
        message DeleteUserPreferenceRequest {
          int32 preference_id = 1;
        }
        
        message DeleteUserPreferenceResponse {
          bool success = 1;
          string message = 2;
        }
        
        message UserPreference {
          int32 id = 1;
          int32 user_id = 2;
          string preference_key = 3;
          string preference_value = 4;
          string category = 5;
          string description = 6;
          string created_at = 7;
          string updated_at = 8;
        }
    tags:
      - grpc-gateway
      - general

  # gRPC-Gateway 插件 - Docs 服務
  - name: grpc-gateway
    service: docs-grpc-service
    config:
      proto: |
        syntax = "proto3";
        
        package docs;
        
        import "google/api/annotations.proto";
        
        service DocsService {
          // 健康檢查端點
          rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
            option (google.api.http) = {
              get: "/api/docs/health"
            };
          }
          
          // 服務資訊端點
          rpc GetServiceInfo(ServiceInfoRequest) returns (ServiceInfoResponse) {
            option (google.api.http) = {
              get: "/api/docs/info"
            };
          }
          
          // 文檔管理端點
          rpc GetAllDocs(GetAllDocsRequest) returns (GetAllDocsResponse) {
            option (google.api.http) = {
              get: "/api/docs"
            };
          }
          
          rpc GetDocByService(GetDocByServiceRequest) returns (GetDocByServiceResponse) {
            option (google.api.http) = {
              get: "/api/docs/{service_name}"
            };
          }
          
          rpc GenerateApiDocs(GenerateApiDocsRequest) returns (GenerateApiDocsResponse) {
            option (google.api.http) = {
              post: "/api/docs/generate"
              body: "*"
            };
          }
          
          rpc GetApiDocumentation(GetApiDocumentationRequest) returns (GetApiDocumentationResponse) {
            option (google.api.http) = {
              get: "/api/docs/api/{service_name}"
            };
          }
        }
        
        // 健康檢查相關訊息
        message HealthCheckRequest {}
        
        message HealthCheckResponse {
          string status = 1;
          string service = 2;
          string message = 3;
          string timestamp = 4;
          string version = 5;
        }
        
        message ServiceInfoRequest {}
        
        message ServiceInfoResponse {
          string service = 1;
          string description = 2;
          string version = 3;
          string author = 4;
          repeated string features = 5;
        }
        
        // 文檔管理相關訊息
        message GetAllDocsRequest {
          int32 page = 1;
          int32 limit = 2;
        }
        
        message GetAllDocsResponse {
          repeated DocInfo docs = 1;
          int32 total = 2;
          bool success = 3;
          string message = 4;
        }
        
        message GetDocByServiceRequest {
          string service_name = 1;
        }
        
        message GetDocByServiceResponse {
          DocInfo doc = 1;
          bool success = 2;
          string message = 3;
        }
        
        message GenerateApiDocsRequest {
          string service_name = 1;
          string doc_type = 2;
          bool force_regenerate = 3;
        }
        
        message GenerateApiDocsResponse {
          string documentation_url = 1;
          string generation_status = 2;
          bool success = 3;
          string message = 4;
        }
        
        message GetApiDocumentationRequest {
          string service_name = 1;
          string format = 2;
        }
        
        message GetApiDocumentationResponse {
          string content = 1;
          string content_type = 2;
          bool success = 3;
          string message = 4;
        }
        
        message DocInfo {
          int32 id = 1;
          string service_name = 2;
          string title = 3;
          string description = 4;
          string version = 5;
          string doc_type = 6;
          string file_path = 7;
          string url = 8;
          string created_at = 9;
          string updated_at = 10;
        }
    tags:
      - grpc-gateway
      - docs

  # Gzip 插件 - 回應壓縮（性能提升）
  - name: gzip
    config:
      types:
        - text/plain
        - text/html
        - text/css
        - text/xml
        - text/javascript
        - application/javascript
        - application/xml+rss
        - application/atom+xml
        - image/svg+xml
        - application/json
        - application/grpc
    tags:
      - performance
      - compression

  # Response Caching 插件 - API 回應快取（優化設定）
  - name: proxy-cache
    config:
      response_code:
        - 200
        - 301
        - 404
      request_method:
        - GET
        - HEAD
      content_type:
        - application/json
        - application/grpc
      cache_ttl: 60
      storage_ttl: 300
      strategy: memory
    tags:
      - performance
      - caching

  # Kong 官方 OPA 插件 - RBAC Auth 路由
  - name: opa
    route: rbac-auth-routes
    config:
      opa_host: http://aiot-opa:8181
      opa_path: /v1/data/aiot/gateway/allow
      include_service_in_opa_input: true
      include_route_in_opa_input: true
      include_consumer_in_opa_input: true
    tags:
      - authorization
      - opa

  # Kong 官方 OPA 插件 - RBAC 路由
  - name: opa
    route: rbac-routes
    config:
      opa_host: http://aiot-opa:8181
      opa_path: /v1/data/aiot/gateway/allow
      include_service_in_opa_input: true
      include_route_in_opa_input: true
      include_consumer_in_opa_input: true
    tags:
      - authorization
      - opa

  # Kong 官方 OPA 插件 - Drone 路由
  - name: opa
    route: drone-api-routes
    config:
      opa_host: http://aiot-opa:8181
      opa_path: /v1/data/aiot/gateway/allow
      include_service_in_opa_input: true
      include_route_in_opa_input: true
      include_consumer_in_opa_input: true
    tags:
      - authorization
      - opa

  # Kong 官方 OPA 插件 - General 路由 (原 FE Setting 服務)
  - name: opa
    route: general-routes
    config:
      opa_host: http://aiot-opa:8181
      opa_path: /v1/data/aiot/gateway/allow
      include_service_in_opa_input: true
      include_route_in_opa_input: true
      include_consumer_in_opa_input: true
    tags:
      - authorization
      - opa

  # Kong 官方 OPA 插件 - Docs 路由
  - name: opa
    route: docs-api-routes
    config:
      opa_host: http://aiot-opa:8181
      opa_path: /v1/data/aiot/gateway/allow
      include_service_in_opa_input: true
      include_route_in_opa_input: true
      include_consumer_in_opa_input: true
    tags:
      - authorization
      - opa

  # CORS 插件 - 應用到所有路由
  - name: cors
    route: rbac-auth-routes
    config:
      origins:
        - "*"
      methods:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
        - OPTIONS
      headers:
        - Accept
        - Accept-Version
        - Content-Length
        - Content-MD5
        - Content-Type
        - Date
        - Authorization
      exposed_headers:
        - X-Auth-Token
      credentials: true
      max_age: 3600

  - name: cors
    route: rbac-routes
    config:
      origins:
        - "*"
      methods:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
        - OPTIONS
      headers:
        - Accept
        - Accept-Version
        - Content-Length
        - Content-MD5
        - Content-Type
        - Date
        - Authorization
      exposed_headers:
        - X-Auth-Token
      credentials: true
      max_age: 3600

  - name: cors
    route: drone-api-routes
    config:
      origins:
        - "*"
      methods:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
        - OPTIONS
      headers:
        - Accept
        - Accept-Version
        - Content-Length
        - Content-MD5
        - Content-Type
        - Date
        - Authorization
      credentials: true
      max_age: 3600

  - name: cors
    route: general-routes
    config:
      origins:
        - "*"
      methods:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
        - OPTIONS
      headers:
        - Accept
        - Accept-Version
        - Content-Length
        - Content-MD5
        - Content-Type
        - Date
        - Authorization
      credentials: true
      max_age: 3600

  - name: cors
    route: docs-api-routes
    config:
      origins:
        - "*"
      methods:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
        - OPTIONS
      headers:
        - Accept
        - Accept-Version
        - Content-Length
        - Content-MD5
        - Content-Type
        - Date
        - Authorization
      credentials: true
      max_age: 3600
