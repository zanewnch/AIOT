# AIOT Microservices Architecture with Kong Gateway & Consul
# 微服務架構 Docker Compose 配置

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-common-env: &common-env
  NODE_ENV: development
  # MySQL 通用配置
  DB_PORT: 3306
  DB_USER: admin
  DB_PASSWORD: admin
  # MongoDB 配置
  MONGODB_URL: mongodb://admin:admin@aiot-mongodb:27017/main_db?authSource=admin
  # Redis 配置
  REDIS_HOST: aiot-redis
  REDIS_PORT: 6379
  REDIS_DB: 0
  REDIS_URL: redis://aiot-redis:6379/0
  # RabbitMQ 配置
  RABBITMQ_URL: amqp://admin:admin@aiot-rabbitmq:5672/
  # Consul 配置
  CONSUL_HOST: consul
  CONSUL_PORT: 8500
  # JWT 配置
  JWT_SECRET: aiot-jwt-secret-key-2024
  JWT_EXPIRES_IN: 24h
  # OPA 配置
  OPA_URL: http://aiot-opa:8181
  
  # ========== Microservice 間通訊配置 ==========
  # RBAC 服務
  RBAC_SERVICE_HOST: aiot-rbac-service
  RBAC_SERVICE_PORT: 50051
  RBAC_SERVICE_URL: aiot-rbac-service:50051
  
  # Drone 服務
  DRONE_SERVICE_HOST: aiot-drone-service
  DRONE_SERVICE_PORT: 50052
  DRONE_SERVICE_URL: aiot-drone-service:50052
  
  # General 服務
  GENERAL_SERVICE_HOST: aiot-general-service
  GENERAL_SERVICE_PORT: 50053
  GENERAL_SERVICE_URL: aiot-general-service:50053
  
  # Drone WebSocket 服務
  DRONE_WEBSOCKET_SERVICE_HOST: aiot-drone-websocket-service
  DRONE_WEBSOCKET_SERVICE_PORT: 3004
  DRONE_WEBSOCKET_SERVICE_URL: http://aiot-drone-websocket-service:3004

services:
  # ==========================================================================
  # 基礎設施服務 (Infrastructure Services)
  # ==========================================================================
  
  # Consul 服務發現
  consul:
    image: consul:1.15
    logging: *default-logging
    container_name: aiot-consul
    ports:
      - "8500:8500"  # HTTP API & UI
      - "8600:8600/udp"  # DNS
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    volumes:
      - consul_data:/consul/data
      - ../consul/consul.json:/consul/config/consul.json:ro
      - ../consul/services:/consul/config/services:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Kong API Gateway
  kong:
    image: kong:3.4
    logging: *default-logging
    container_name: aiot-kong
    ports:
      - "8000:8000"  # HTTP Proxy
      - "8001:8001"  # Admin API
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong/kong.yaml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PLUGINS=bundled
      # 性能優化設定
      - KONG_WORKER_PROCESSES=auto
      - KONG_WORKER_CONNECTIONS=1024
      - KONG_NGINX_WORKER_PROCESSES=auto
      - KONG_NGINX_HTTP_PROXY_BUFFERING=on
      - KONG_NGINX_HTTP_PROXY_BUFFER_SIZE=128k
      - KONG_NGINX_HTTP_PROXY_BUFFERS=8 128k
      - KONG_NGINX_HTTP_PROXY_BUSY_BUFFERS_SIZE=256k
      # gRPC 連線優化
      - KONG_NGINX_HTTP_GRPC_READ_TIMEOUT=30s
      - KONG_NGINX_HTTP_GRPC_SEND_TIMEOUT=30s
      # 快取優化
      - KONG_PROXY_CACHE_LOCK=on
      - KONG_MEM_CACHE_SIZE=128m
    volumes:
      - ../kong:/kong:ro
      - ../kong/protos:/kong/protos:ro
      - kong_logs:/tmp
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # OPA 集中式權限管理服務
  aiot-opa:
    image: openpolicyagent/opa:latest-envoy
    logging: *default-logging
    container_name: aiot-opa
    ports:
      - "8181:8181"  # HTTP API
      - "9191:9191"  # gRPC Envoy External Authorization
    command:
      - "run"
      - "--server"
      - "--config-file=/etc/opa/config.yaml"
      - "/etc/opa/policies"
    volumes:
      - ../opa/server/config.yaml:/etc/opa/config.yaml:ro
      - ../opa/policies:/etc/opa/policies:ro
      - ../opa/data:/etc/opa/data:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - OPA_LOG_LEVEL=info
      - OPA_LOG_FORMAT=json

  # OPA Bundle Server for policy distribution
  aiot-opa-bundle-server:
    image: nginx:alpine
    logging: *default-logging
    container_name: aiot-opa-bundle-server
    ports:
      - "8080:80"
    volumes:
      - /tmp:/usr/share/nginx/html/bundles:ro
      - ../opa/server/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - aiot-network
    restart: unless-stopped
    depends_on:
      - aiot-opa

  # ==========================================================================
  # 資料庫服務 (Database Services)
  # ==========================================================================

  # RBAC 微服務專用 MySQL 資料庫
  aiot-rbac-mysql:
    image: mysql:8.0
    logging: *default-logging
    container_name: aiot-rbac-mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=admin
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin
      - MYSQL_DATABASE=rbac_db
      - TZ=Asia/Taipei
      # 跳過時區資訊初始化以加快啟動速度
      - MYSQL_INITDB_SKIP_TZINFO=1
    volumes:
      - mysql_rbac_data:/var/lib/mysql
      # RBAC 專用初始化腳本
      - ../database/mysql/00_database_init.sql:/docker-entrypoint-initdb.d/00_database_init.sql:ro
      - ../database/mysql/01_rbac_system_init.sql:/docker-entrypoint-initdb.d/01_rbac_system_init.sql:ro
      - ../database/mysql/02_users_test_data.sql:/docker-entrypoint-initdb.d/02_users_test_data.sql:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "admin", "-padmin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Drone 微服務專用 MySQL 資料庫
  aiot-drone-mysql:
    image: mysql:8.0
    logging: *default-logging
    container_name: aiot-drone-mysql
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=admin
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin
      - MYSQL_DATABASE=drone_db
      - TZ=Asia/Taipei
      # 跳過時區資訊初始化以加快啟動速度
      - MYSQL_INITDB_SKIP_TZINFO=1
    volumes:
      - mysql_drone_data:/var/lib/mysql
      # Drone 專用初始化腳本
      - ../database/mysql/00_database_init.sql:/docker-entrypoint-initdb.d/00_database_init.sql:ro
      - ../database/mysql/03_drone_flight_positions.sql:/docker-entrypoint-initdb.d/03_drone_flight_positions.sql:ro
      - ../database/mysql/04_drone_basic_info.sql:/docker-entrypoint-initdb.d/04_drone_basic_info.sql:ro
      - ../database/mysql/05_drone_realtime_status_table.sql:/docker-entrypoint-initdb.d/05_drone_realtime_status_table.sql:ro
      - ../database/mysql/06_drone_commands_test_data.sql:/docker-entrypoint-initdb.d/06_drone_commands_test_data.sql:ro
      - ../database/mysql/07_command_queues_test_data.sql:/docker-entrypoint-initdb.d/07_command_queues_test_data.sql:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "admin", "-padmin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # General 微服務專用 MySQL 資料庫
  aiot-general-mysql:
    image: mysql:8.0
    logging: *default-logging
    container_name: aiot-general-mysql
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=admin
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin
      - MYSQL_DATABASE=user_preference_db
      - TZ=Asia/Taipei
      # 跳過時區資訊初始化以加快啟動速度
      - MYSQL_INITDB_SKIP_TZINFO=1
    volumes:
      - mysql_general_data:/var/lib/mysql
      # General 專用初始化腳本
      - ../database/mysql/00_database_init.sql:/docker-entrypoint-initdb.d/00_database_init.sql:ro
      - ../database/mysql/08_user_preferences_init.sql:/docker-entrypoint-initdb.d/08_user_preferences_init.sql:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "admin", "-padmin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 共享 MySQL 資料庫（用於跨服務共享数據）
  aiot-shared-mysql:
    image: mysql:8.0
    logging: *default-logging
    container_name: aiot-shared-mysql
    ports:
      - "3309:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=admin
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin
      - MYSQL_DATABASE=main_db
      - TZ=Asia/Taipei
      # 跳過時區資訊初始化以加快啟動速度
      - MYSQL_INITDB_SKIP_TZINFO=1
    volumes:
      - mysql_shared_data:/var/lib/mysql
      # 基礎初始化腳本
      - ../database/mysql/00_database_init.sql:/docker-entrypoint-initdb.d/00_database_init.sql:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "admin", "-padmin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB 資料庫
  aiot-mongodb:
    image: mongo:7.0
    logging: *default-logging
    container_name: aiot-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=main_db
    volumes:
      - mongodb_data:/data/db
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "-u", "admin", "-p", "admin", "--authenticationDatabase", "admin", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 快取服務
  aiot-redis:
    image: redis:7-alpine
    logging: *default-logging
    container_name: aiot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aiot-network
    restart: unless-stopped

  # RabbitMQ 消息隊列
  aiot-rabbitmq:
    image: rabbitmq:3-management-alpine
    logging: *default-logging
    container_name: aiot-rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ../rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ../rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================================================================
  # 微服務 (Microservices)
  # ==========================================================================

  # RBAC 微服務 (gRPC + HTTP)
  rbac-service:
    build:
      context: ../../microServices/rbac-service
      dockerfile: Dockerfile.dev
    logging: *default-logging
    container_name: aiot-rbac-service
    ports:
      - "50051:50051" # gRPC for inter-service communication
      - "3051:3051"   # HTTP for Kong communication
    environment:
      <<: *common-env
      SERVICE_NAME: rbac-service
      GRPC_PORT: 50051
      HTTP_PORT: 3051
      # RBAC 專用資料庫配置
      DB_HOST: aiot-rbac-mysql
      DB_NAME: rbac_db
    volumes:
      - ../../microServices/rbac-service:/app
      - /app/node_modules
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-rbac-mysql:
        condition: service_healthy
      aiot-redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3051/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Drone API 微服務 (gRPC + HTTP)
  drone-service:
    build:
      context: ../../microServices/drone-service
      dockerfile: Dockerfile.dev
    logging: *default-logging
    container_name: aiot-drone-service
    ports:
      - "50052:50052" # gRPC for inter-service communication
      - "3052:3052"   # HTTP for Kong communication
    environment:
      <<: *common-env
      SERVICE_NAME: drone-service
      GRPC_PORT: 50052
      HTTP_PORT: 3052
      # Drone 專用資料庫配置
      DB_HOST: aiot-drone-mysql
      DB_NAME: drone_db
    volumes:
      - ../../microServices/drone-service:/app
      - /app/node_modules
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-drone-mysql:
        condition: service_healthy
      aiot-redis:
        condition: service_started
      aiot-rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3052/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Drone WebSocket 微服務 (專門處理 WebSocket)
  drone-websocket-service:
    build:
      context: ../../microServices/drone-websocket-service
      dockerfile: Dockerfile.dev
    logging: *default-logging
    container_name: aiot-drone-websocket-service
    ports:
      - "3004:3004"   # WebSocket 服務
    environment:
      <<: *common-env
      SERVICE_NAME: drone-websocket-service
      SERVICE_PORT: 3004
      # Drone 專用資料庫配置（共享 Drone DB）
      DB_HOST: aiot-drone-mysql
      DB_NAME: drone_db
      # CORS 配置
      CORS_ORIGIN: "*"
    volumes:
      - ../../microServices/drone-websocket-service:/app
      - /app/node_modules
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-drone-mysql:
        condition: service_healthy
      aiot-redis:
        condition: service_started
      aiot-opa:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # General 微服務 (gRPC + HTTP)
  general-service:
    build:
      context: ../../microServices/general-service
      dockerfile: Dockerfile.dev
    logging: *default-logging
    container_name: aiot-general-service
    ports:
      - "50053:50053" # gRPC for inter-service communication
      - "3053:3053"   # HTTP for Kong communication
    environment:
      <<: *common-env
      SERVICE_NAME: general-service
      GRPC_PORT: 50053
      HTTP_PORT: 3053
      # General 專用資料庫配置
      DB_HOST: aiot-general-mysql
      DB_NAME: user_preference_db
    volumes:
      - ../../microServices/general-service:/app
      - /app/node_modules
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-general-mysql:
        condition: service_healthy
      aiot-redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3053/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Docs 微服務 (gRPC + HTTP - 文檔聚合服務)
  docs-service:
    build:
      context: ../../microServices/docs-service
      dockerfile: Dockerfile.dev
    logging: *default-logging
    container_name: aiot-docs-service
    ports:
      - "50054:50054" # gRPC for inter-service communication
      - "3054:3054"   # HTTP for Kong communication
    environment:
      <<: *common-env
      SERVICE_NAME: docs-service
      GRPC_PORT: 50054
      HTTP_PORT: 3054
      NODE_ENV: development
      # 文檔服務無需資料庫配置
    volumes:
      - ../../microServices/docs-service:/app
      - /app/node_modules
      # 掛載各微服務的文檔目錄
      - ../../microServices/rbac-service/docs:/app/docs/rbac:ro
      - ../../microServices/drone-service/docs:/app/docs/drone:ro
      - ../../microServices/drone-websocket-service/docs:/app/docs/drone-websocket:ro
      - ../../microServices/general-service/docs:/app/docs/general:ro
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3054/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # 前端應用 (Frontend Application)
  # ==========================================================================

  # 前端 React 應用
  frontend-app:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.fe
    logging: *default-logging
    container_name: aiot-frontend
    ports:
      - "3000:3000"   # Vite 開發服務器
    environment:
      # 前端專用環境變數（不繼承微服務配置）
      NODE_ENV: development
      # API 端點配置 - 前端直接連接到 Kong Gateway
      VITE_API_BASE_URL: http://localhost:8000/api
      VITE_WS_URL: ws://localhost:3004
      VITE_KONG_GATEWAY_URL: http://localhost:8000
      # 開發模式配置
      CHOKIDAR_USEPOLLING: true  # 支援容器內 hot-reload
    volumes:
      - ../../frontend:/app/fe
      - /app/fe/node_modules
      # 快取 node_modules 以提升效能
    networks:
      - aiot-network
    # 前端不依賴後端服務，獨立啟動
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Vite 需要較長啟動時間

  # ==========================================================================
  # 監控服務 (Monitoring Services) - 可選
  # ==========================================================================

  # Prometheus 監控
  prometheus:
    image: prom/prometheus:v2.45.0
    logging: *default-logging
    container_name: aiot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - aiot-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana 儀表板
  grafana:
    image: grafana/grafana:10.0.0
    logging: *default-logging
    container_name: aiot-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - aiot-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

# ==========================================================================
# 資料持久化 (Persistent Volumes)
# ==========================================================================
volumes:
  # 各微服務專用 MySQL 資料持久化
  mysql_rbac_data:
    driver: local
    name: aiot_mysql_rbac_data
  mysql_drone_data:
    driver: local
    name: aiot_mysql_drone_data
  mysql_general_data:
    driver: local
    name: aiot_mysql_general_data
  mysql_shared_data:
    driver: local
    name: aiot_mysql_shared_data
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  consul_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  kong_logs:
    driver: local

# ==========================================================================
# 網路配置 (Network Configuration)
# ==========================================================================
networks:
  aiot-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16