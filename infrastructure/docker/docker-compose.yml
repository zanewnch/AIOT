# AIOT Microservices Architecture with Express.js API Gateway
# 微服務架構 Docker Compose 配置

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-common-env: &common-env
  NODE_ENV: development
  # PostgreSQL 通用配置
  DB_PORT: 5432
  DB_USER: admin
  DB_PASSWORD: admin
  # MongoDB 配置
  MONGODB_URL: mongodb://admin:admin@aiot-mongodb:27017/main_db?authSource=admin
  # Redis 配置
  REDIS_HOST: aiot-redis
  REDIS_PORT: 6379
  REDIS_DB: 0
  REDIS_URL: redis://aiot-redis:6379/0
  # RabbitMQ 配置
  RABBITMQ_URL: amqp://admin:admin@aiot-rabbitmq:5672/
  # Consul 配置
  CONSUL_HOST: consul
  CONSUL_PORT: 8500
  # JWT 配置
  JWT_SECRET: zanewnch
  JWT_EXPIRES_IN: 24h
  
  # ========== Microservice 間通訊配置 ==========
  # RBAC 服務
  RBAC_SERVICE_HOST: aiot-rbac-service
  RBAC_SERVICE_PORT: 50051
  RBAC_SERVICE_URL: aiot-rbac-service:50051
  
  # Drone 服務
  DRONE_SERVICE_HOST: aiot-drone-service
  DRONE_SERVICE_PORT: 50052
  DRONE_SERVICE_URL: aiot-drone-service:50052
  
  # General 服務
  GENERAL_SERVICE_HOST: aiot-general-service
  GENERAL_SERVICE_PORT: 50053
  GENERAL_SERVICE_URL: aiot-general-service:50053
  
  # Drone WebSocket 服務
  DRONE_WEBSOCKET_SERVICE_HOST: aiot-drone-websocket-service
  DRONE_WEBSOCKET_SERVICE_PORT: 3004
  DRONE_WEBSOCKET_SERVICE_URL: http://aiot-drone-websocket-service:3004
  
  # Scheduler 服務
  SCHEDULER_SERVICE_HOST: aiot-scheduler-service
  SCHEDULER_SERVICE_PORT: 3001
  SCHEDULER_SERVICE_URL: http://aiot-scheduler-service:3001
  
  # Archive Consumer 服務
  ARCHIVE_CONSUMER_SERVICE_HOST: aiot-archive-consumer-service
  ARCHIVE_CONSUMER_SERVICE_PORT: 3005
  ARCHIVE_CONSUMER_SERVICE_URL: http://aiot-archive-consumer-service:3005
  
  # LLM AI Engine 服務
  LLM_AI_ENGINE_HOST: aiot-llm-service
  LLM_AI_ENGINE_PORT: 8021
  LLM_AI_ENGINE_URL: http://aiot-llm-service:8021

services:
  # ==========================================================================
  # 基礎設施服務 (Infrastructure Services)
  # ==========================================================================
  
  # Consul 服務發現
  consul:
    build:
      context: ../consul
      dockerfile: Dockerfile.dev
    logging: *default-logging
    container_name: aiot-consul
    ports:
      - "8500:8500"  # HTTP API & UI
      - "8600:8600/udp"  # DNS
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    volumes:
      - consul_data:/consul/data
      - ../consul/consul.json:/consul/config/consul.json:ro
    networks:
      - aiot-network
    restart: unless-stopped
    # 修復權限問題：添加必要的 capabilities 和安全設定
    cap_add:
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:false
    user: "0:0"  # 使用 root 用戶避免 setgroups 權限問題
    healthcheck:
      # 檢查 Consul 集群成員狀態和服務註冊功能
      # 確保 Consul 節點正常運行並可以進行服務發現
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3




  # ==========================================================================
  # 資料庫服務 (Database Services)
  # ==========================================================================

  # RBAC 微服務專用 PostgreSQL 資料庫
  aiot-rbac-postgres:
    image: postgres:15-alpine
    logging: *default-logging
    container_name: aiot-rbac-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: rbac_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      TZ: Asia/Taipei
    volumes:
      - postgres_rbac_data:/var/lib/postgresql/data
      # RBAC 專用初始化腳本
      - ../database/postgresql:/docker-entrypoint-initdb.d:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      # 檢查 PostgreSQL 資料庫連線狀態和認證功能
      # 確保 RBAC 服務的專用資料庫可以正常連線和查詢
      test: ["CMD-SHELL", "pg_isready -U admin -d rbac_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Drone 微服務專用 PostgreSQL 資料庫
  aiot-drone-postgres:
    image: postgres:15-alpine
    logging: *default-logging
    container_name: aiot-drone-postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: drone_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      TZ: Asia/Taipei
    volumes:
      - postgres_drone_data:/var/lib/postgresql/data
      # Drone 專用初始化腳本
      - ../database/postgresql:/docker-entrypoint-initdb.d:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      # 檢查 PostgreSQL 資料庫連線狀態和認證功能
      # 確保 Drone 服務的專用資料庫可以正常連線和查詢
      test: ["CMD-SHELL", "pg_isready -U admin -d drone_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # General 微服務專用 PostgreSQL 資料庫
  aiot-general-postgres:
    image: postgres:15-alpine
    logging: *default-logging
    container_name: aiot-general-postgres
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: user_preference_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      TZ: Asia/Taipei
    volumes:
      - postgres_general_data:/var/lib/postgresql/data
      # General 專用初始化腳本
      - ../database/postgresql:/docker-entrypoint-initdb.d:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      # 檢查 PostgreSQL 資料庫連線狀態和認證功能
      # 確保 General 服務的專用資料庫可以正常連線和查詢
      test: ["CMD-SHELL", "pg_isready -U admin -d user_preference_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 共享 PostgreSQL 資料庫（用於跨服務共享数據）
  aiot-shared-postgres:
    image: postgres:15-alpine
    logging: *default-logging
    container_name: aiot-shared-postgres
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: main_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      TZ: Asia/Taipei
    volumes:
      - postgres_shared_data:/var/lib/postgresql/data
      # 基礎初始化腳本
      - ../database/postgresql:/docker-entrypoint-initdb.d:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      # 檢查 PostgreSQL 資料庫連線狀態和認證功能
      # 確保共享資料庫可以正常連線，供跨服務數據共享使用
      test: ["CMD-SHELL", "pg_isready -U admin -d main_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL 資料庫 (專用於 LLM AI Engine)
  aiot-llm-postgres:
    image: postgres:15-alpine
    logging: *default-logging
    container_name: aiot-llm-postgres
    ports:
      - "5436:5432"   # PostgreSQL (避免與系統預設 5432 衝突)
    environment:
      POSTGRES_DB: llm_ai_db
      POSTGRES_USER: llm_user
      POSTGRES_PASSWORD: llm_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_llm_data:/var/lib/postgresql/data
      - ../database/postgresql:/docker-entrypoint-initdb.d:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      # 檢查 PostgreSQL LLM 資料庫狀態
      # 確保 LLM 相關的對話歷史、工具調用記錄等結構化數據可以正常儲存
      test: ["CMD-SHELL", "pg_isready -U llm_user -d llm_ai_db"]
      interval: 10s
      timeout: 5s
      retries: 5


  # MongoDB 資料庫
  aiot-mongodb:
    image: mongo:7.0
    logging: *default-logging
    container_name: aiot-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=main_db
    volumes:
      - mongodb_data:/data/db
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      # 檢查 MongoDB 資料庫連線和認證狀態
      # 執行 ping 命令確保 MongoDB 服務正常運行並可接受查詢請求
      test: ["CMD", "mongosh", "-u", "admin", "-p", "admin", "--authenticationDatabase", "admin", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 快取服務
  aiot-redis:
    image: redis:7-alpine
    logging: *default-logging
    container_name: aiot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      # 檢查 Redis 快取服務的連線狀態
      # 確保 Redis 可以正常接收和處理快取請求，支援微服務的階段式存取
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # RabbitMQ 消息隊列
  aiot-rabbitmq:
    build:
      context: ../rabbitmq
      dockerfile: Dockerfile.dev
    logging: *default-logging
    container_name: aiot-rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ../rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ../rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      # 檢查 RabbitMQ 消息隊列服務狀態
      # 確保消息隊列可以正常接收和處理消息，微服務間異步通訊正常
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5


  # ==========================================================================
  # 微服務 (Microservices)
  # ==========================================================================

  # Auth 微服務 (gRPC + HTTP) - 專門處理認證功能
  auth-service:
    build:
      context: ../../
      dockerfile: microServices/auth-service/Dockerfile.dev
    logging: *default-logging
    container_name: aiot-auth-service
    ports:
      - "50055:50055" # gRPC for inter-service communication
      - "3055:3055"   # HTTP API endpoint
    volumes:
      - ../../microServices/auth-service/src:/app/src
      - ../../microServices/auth-service/package.json:/app/package.json
      - ../../microServices/auth-service/tsconfig.json:/app/tsconfig.json
      - ../../microServices/auth-service/nodemon.json:/app/nodemon.json
      - /app/node_modules
      - /app/aiot-shared-packages
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-rbac-postgres:
        condition: service_healthy
      aiot-redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      # 檢查 Auth 微服務的 HTTP API 端點健康狀態
      # 確保認證服務正常運行，可以處理用戶登入登出請求
      test: ["CMD", "curl", "-f", "http://localhost:3055/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RBAC 微服務 (gRPC + HTTP) - 專門處理角色權限管理
  rbac-service:
    build:
      context: ../../  # 使用項目根目錄作為構建上下文
      dockerfile: microServices/rbac-service/Dockerfile.dev
    logging: *default-logging
    container_name: aiot-rbac-service
    ports:
      - "50051:50051" # gRPC for inter-service communication
      - "3051:3051"   # HTTP API endpoint
    volumes:
      - ../../microServices/rbac-service/src:/app/src
      - ../../microServices/rbac-service/package.json:/app/package.json
      - ../../microServices/rbac-service/tsconfig.json:/app/tsconfig.json
      - ../../microServices/rbac-service/nodemon.json:/app/nodemon.json
      - /app/node_modules
      - /app/aiot-shared-packages
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-rbac-postgres:
        condition: service_healthy
      aiot-redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      # 檢查 RBAC 微服務的 HTTP API 端點健康狀態
      # 確保權限認證服務正常運行，可以處理用戶權限驗證請求
      test: ["CMD", "curl", "-f", "http://localhost:3051/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Drone API 微服務 (gRPC + HTTP)
  drone-service:
    build:
      context: ../../
      dockerfile: microServices/drone-service/Dockerfile.dev
    logging: *default-logging
    container_name: aiot-drone-service
    ports:
      - "50052:50052" # gRPC for inter-service communication
      - "3052:3052"   # HTTP API endpoint
    volumes:
      - ../../microServices/drone-service/src:/app/src
      - ../../microServices/drone-service/package.json:/app/package.json
      - ../../microServices/drone-service/tsconfig.json:/app/tsconfig.json
      - ../../microServices/drone-service/nodemon.json:/app/nodemon.json
      - /app/node_modules
      - /app/aiot-shared-packages
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-drone-postgres:
        condition: service_healthy
      aiot-redis:
        condition: service_started
      aiot-rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      # 檢查 Drone 微服務的 HTTP API 端點健康狀態
      # 確保無人機管理服務正常運行，可以處理無人機相關的 API 請求
      test: ["CMD", "curl", "-f", "http://localhost:3052/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Drone WebSocket 微服務 (專門處理 WebSocket)
  drone-websocket-service:
    build:
      context: ../../microServices/drone-websocket-service
      dockerfile: Dockerfile.dev
    logging: *default-logging
    container_name: aiot-drone-websocket-service
    ports:
      - "3004:3004"   # WebSocket 服務
    volumes:
      - ../../microServices/drone-websocket-service:/app
      - /app/node_modules
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-drone-postgres:
        condition: service_healthy
      aiot-redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      # 檢查 Drone WebSocket 服務的健康狀態
      # 確保無人機即時通訊服務正常，可以處理 WebSocket 連線和即時數據推送
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # General 微服務 (gRPC + HTTP)
  general-service:
    build:
      context: ../../
      dockerfile: microServices/general-service/Dockerfile.dev
    logging: *default-logging
    container_name: aiot-general-service
    ports:
      - "50053:50053" # gRPC for inter-service communication
      - "3053:3053"   # HTTP API endpoint
    volumes:
      - ../../microServices/general-service/src:/app/src
      - ../../microServices/general-service/package.json:/app/package.json
      - ../../microServices/general-service/tsconfig.json:/app/tsconfig.json
      - ../../microServices/general-service/nodemon.json:/app/nodemon.json
      - /app/node_modules
      - /app/aiot-shared-packages
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-general-postgres:
        condition: service_healthy
      aiot-redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      # 檢查 General 微服務的 HTTP API 端點健康狀態
      # 確保通用服務正常運行，可以處理用戶偏好設定等通用功能請求
      test: ["CMD", "curl", "-f", "http://localhost:3053/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  # Scheduler 微服務 (定時任務排程器)
  scheduler-service:
    build:
      context: ../../microServices/scheduler-service
      dockerfile: Dockerfile.dev
    logging: *default-logging
    container_name: aiot-scheduler-service
    ports:
      - "3001:3001"   # HTTP API endpoint
    volumes:
      - ../../microServices/scheduler-service:/app
      - /app/node_modules
      - scheduler_logs:/app/logs
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-drone-postgres:
        condition: service_healthy
      aiot-redis:
        condition: service_started
      aiot-rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      # 檢查 Scheduler 微服務的 HTTP API 端點健康狀態
      # 確保排程服務正常運行，可以處理定時任務排程和觸發
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Archive Consumer 微服務 (歸檔處理器)
  archive-consumer-service:
    build:
      context: ../../
      dockerfile: microServices/archive-consumer-service/Dockerfile.dev
    logging: *default-logging
    container_name: aiot-archive-consumer-service
    ports:
      - "3005:3005"   # HTTP API endpoint
    volumes:
      - ../../microServices/archive-consumer-service:/app
      - /app/node_modules
      - archive_consumer_logs:/app/logs
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-drone-postgres:
        condition: service_healthy
      aiot-redis:
        condition: service_started
      aiot-rabbitmq:
        condition: service_healthy
      scheduler-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      # 檢查 Archive Processor 微服務的 HTTP API 端點健康狀態
      # 確保歸檔處理服務正常運行，可以處理 RabbitMQ 歸檔任務
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LLM AI Engine 微服務 (FastAPI + SmolLM2)
  llm-service:
    build:
      context: ../../microServices/llm-service
      dockerfile: Dockerfile.dev
    logging: *default-logging
    container_name: aiot-llm-service
    ports:
      - "8021:8021"   # FastAPI AI Engine
    volumes:
      - ../../microServices/llm-service:/app
      - llm_ai_engine_chroma:/app/chroma_db  # 持久化向量資料庫
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-llm-postgres:
        condition: service_healthy
      aiot-redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      # 檢查 LLM AI Engine 的健康狀態
      # 確保 SmolLM2 模型已載入並可以正常推理
      test: ["CMD", "curl", "-f", "http://localhost:8021/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # AI 模型載入需要較長時間


  # Gateway API 服務 (Express.js API Gateway)
  gateway-service:
    build:
      context: ../../microServices/gateway-service
      dockerfile: Dockerfile.dev
    logging: *default-logging
    container_name: aiot-gateway-service
    ports:
      - "8000:8000"   # Gateway HTTP API endpoint
    volumes:
      - ../../microServices/gateway-service:/app
      - /app/node_modules
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-redis:
        condition: service_started
      llm-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      # 檢查 Gateway 服務的健康狀態
      # 確保 API 網關正常運行，可以接收和轉發前端請求到對應的微服務
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # 前端應用 (Frontend Application)
  # ==========================================================================

  # 前端 React 應用
  frontend-app:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.fe
    logging: *default-logging
    container_name: aiot-frontend
    ports:
      - "3000:3000"   # Vite 開發服務器
    volumes:
      - ../../frontend:/app/fe
      - /app/fe/node_modules
      # 快取 node_modules 以提升效能
    networks:
      - aiot-network
    # 前端不依賴後端服務，獨立啟動
    restart: unless-stopped
    healthcheck:
      # 檢查前端 React 應用的健康狀態
      # 確保 Vite 開發服務器正常運行，前端頁面可以正常訪問和載入
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Vite 需要較長啟動時間

  # ==========================================================================
  # 監控服務 (Monitoring Services) - 可選
  # ==========================================================================

  # Prometheus 監控
  prometheus:
    image: prom/prometheus:v2.45.0
    logging: *default-logging
    container_name: aiot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - aiot-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana 儀表板
  grafana:
    image: grafana/grafana:10.0.0
    logging: *default-logging
    container_name: aiot-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - aiot-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

# ==========================================================================
# 資料持久化 (Persistent Volumes)
# ==========================================================================
volumes:
  # 各微服務專用 PostgreSQL 資料持久化
  postgres_rbac_data:
    driver: local
    name: aiot_postgres_rbac_data
  postgres_drone_data:
    driver: local
    name: aiot_postgres_drone_data
  postgres_general_data:
    driver: local
    name: aiot_postgres_general_data
  postgres_shared_data:
    driver: local
    name: aiot_postgres_shared_data
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  consul_data:
    driver: local
  # 新增微服務日誌持久化
  scheduler_logs:
    driver: local
    name: aiot_scheduler_logs
  archive_consumer_logs:
    driver: local
    name: aiot_archive_consumer_logs
  # LLM 服務持久化
  llm_ai_engine_chroma:
    driver: local
    name: aiot_llm_ai_engine_chroma
  postgres_llm_data:
    driver: local
    name: aiot_postgres_llm_data
  llm_service_db:
    driver: local
    name: aiot_llm_service_db
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ==========================================================================
# 網路配置 (Network Configuration)
# ==========================================================================
networks:
  aiot-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16