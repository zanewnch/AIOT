# AIOT Microservices Architecture with Kong Gateway & Consul
# 微服務架構 Docker Compose 配置

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-common-env: &common-env
  NODE_ENV: development
  # MySQL 配置
  DB_HOST: aiot-mysqldb
  DB_PORT: 3306
  DB_USER: admin
  DB_PASSWORD: admin
  # MongoDB 配置
  MONGODB_URL: mongodb://admin:admin@aiot-mongodb:27017/main_db?authSource=admin
  # Redis 配置
  REDIS_HOST: aiot-redis
  REDIS_PORT: 6379
  REDIS_DB: 0
  REDIS_URL: redis://aiot-redis:6379/0
  # RabbitMQ 配置
  RABBITMQ_URL: amqp://admin:admin@aiot-rabbitmq:5672/
  # Consul 配置
  CONSUL_HOST: consul
  CONSUL_PORT: 8500
  # JWT 配置
  JWT_SECRET: aiot-jwt-secret-key-2024
  JWT_EXPIRES_IN: 24h
  # OPA 配置
  OPA_URL: http://aiot-opa:8181
  
  # ========== Microservice 間通訊配置 ==========
  # RBAC 服務
  RBAC_SERVICE_HOST: aiot-rbac-service
  RBAC_SERVICE_PORT: 50051
  RBAC_SERVICE_URL: aiot-rbac-service:50051
  
  # Drone 服務
  DRONE_SERVICE_HOST: aiot-drone-service
  DRONE_SERVICE_PORT: 50052
  DRONE_SERVICE_URL: aiot-drone-service:50052
  
  # General 服務
  GENERAL_SERVICE_HOST: aiot-general-service
  GENERAL_SERVICE_PORT: 50053
  GENERAL_SERVICE_URL: aiot-general-service:50053
  
  # Drone WebSocket 服務
  DRONE_WEBSOCKET_SERVICE_HOST: aiot-drone-websocket-service
  DRONE_WEBSOCKET_SERVICE_PORT: 3004
  DRONE_WEBSOCKET_SERVICE_URL: http://aiot-drone-websocket-service:3004

services:
  # ==========================================================================
  # 基礎設施服務 (Infrastructure Services)
  # ==========================================================================
  
  # Consul 服務發現
  consul:
    image: consul:1.15
    logging: *default-logging
    container_name: aiot-consul
    ports:
      - "8500:8500"  # HTTP API & UI
      - "8600:8600/udp"  # DNS
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    volumes:
      - consul_data:/consul/data
      - ../consul/consul.json:/consul/config/consul.json:ro
      - ../consul/services:/consul/config/services:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Kong API Gateway
  kong:
    image: kong:3.4
    logging: *default-logging
    container_name: aiot-kong
    ports:
      - "8000:8000"  # HTTP Proxy
      - "8443:8443"  # HTTPS Proxy
      - "8001:8001"  # Admin API
      - "8444:8444"  # Admin API HTTPS
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong/kong.yaml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
      - KONG_PLUGINS=bundled
    volumes:
      - ../kong:/kong:ro
      - ../kong/protos:/kong/protos:ro
      - kong_logs:/tmp
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # OPA 集中式權限管理服務
  aiot-opa:
    image: openpolicyagent/opa:latest-envoy
    logging: *default-logging
    container_name: aiot-opa
    ports:
      - "8181:8181"  # HTTP API
      - "9191:9191"  # gRPC Envoy External Authorization
    command:
      - "run"
      - "--server"
      - "--config-file=/etc/opa/config.yaml"
      - "/etc/opa/policies"
    volumes:
      - ../opa/server/config.yaml:/etc/opa/config.yaml:ro
      - ../opa/policies:/etc/opa/policies:ro
      - ../opa/data:/etc/opa/data:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - OPA_LOG_LEVEL=info
      - OPA_LOG_FORMAT=json

  # OPA Bundle Server for policy distribution
  aiot-opa-bundle-server:
    image: nginx:alpine
    logging: *default-logging
    container_name: aiot-opa-bundle-server
    ports:
      - "8080:80"
    volumes:
      - ../opa/bundles:/usr/share/nginx/html:ro
      - ../opa/server/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - aiot-network
    restart: unless-stopped
    depends_on:
      - aiot-opa

  # ==========================================================================
  # 資料庫服務 (Database Services)
  # ==========================================================================

  # MySQL 資料庫
  aiot-mysqldb:
    image: mysql:8.0
    logging: *default-logging
    container_name: aiot-mysqldb
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=admin
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin
      - MYSQL_DATABASE=main_db
      - TZ=Asia/Taipei
      # 跳過時區資訊初始化以加快啟動速度
      - MYSQL_INITDB_SKIP_TZINFO=1
    volumes:
      - mysql_data:/var/lib/mysql
      # 自動執行 MySQL 初始化腳本（按字母順序：01_, 02_, 03_...）
      - ../database/mysql:/docker-entrypoint-initdb.d:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "admin", "-padmin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB 資料庫
  aiot-mongodb:
    image: mongo:7.0
    logging: *default-logging
    container_name: aiot-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=main_db
    volumes:
      - mongodb_data:/data/db
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "-u", "admin", "-p", "admin", "--authenticationDatabase", "admin", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 快取服務
  aiot-redis:
    image: redis:7-alpine
    logging: *default-logging
    container_name: aiot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aiot-network
    restart: unless-stopped

  # RabbitMQ 消息隊列
  aiot-rabbitmq:
    image: rabbitmq:3-management-alpine
    logging: *default-logging
    container_name: aiot-rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ../rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ../rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - aiot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================================================================
  # 微服務 (Microservices)
  # ==========================================================================

  # RBAC 微服務 (純 gRPC)
  rbac-service:
    build:
      context: ../../microServices/rbac-service
      dockerfile: Dockerfile
    logging: *default-logging
    container_name: aiot-rbac-service
    ports:
      - "50051:50051" # gRPC only
    environment:
      <<: *common-env
      SERVICE_NAME: rbac-service
      GRPC_PORT: 50051
      DB_NAME: rbac_db
    volumes:
      - ../../microServices/rbac-service:/app
      - /app/node_modules
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-mysqldb:
        condition: service_healthy
      aiot-redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Drone API 微服務 (純 gRPC)
  drone-service:
    build:
      context: ../../microServices/drone-service
      dockerfile: Dockerfile
    logging: *default-logging
    container_name: aiot-drone-service
    ports:
      - "50052:50052" # gRPC only
    environment:
      <<: *common-env
      SERVICE_NAME: drone-service
      GRPC_PORT: 50052
      DB_NAME: drone_db
    volumes:
      - ../../microServices/drone-service:/app
      - /app/node_modules
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-mysqldb:
        condition: service_healthy
      aiot-redis:
        condition: service_started
      aiot-rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50052"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Drone WebSocket 微服務 (專門處理 WebSocket)
  drone-websocket-service:
    build:
      context: ../../microServices/drone-websocket-service
      dockerfile: Dockerfile
    logging: *default-logging
    container_name: aiot-drone-websocket-service
    ports:
      - "3004:3004"   # WebSocket 服務
    environment:
      <<: *common-env
      SERVICE_NAME: drone-websocket-service
      SERVICE_PORT: 3004
      DB_NAME: drone_db
      # CORS 配置
      CORS_ORIGIN: "*"
    volumes:
      - ../../microServices/drone-websocket-service:/app
      - /app/node_modules
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-mysqldb:
        condition: service_healthy
      aiot-redis:
        condition: service_started
      aiot-opa:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # General 微服務 (純 gRPC)
  general-service:
    build:
      context: ../../microServices/general-service
      dockerfile: Dockerfile
    logging: *default-logging
    container_name: aiot-general-service
    ports:
      - "50053:50053" # gRPC only
    environment:
      <<: *common-env
      SERVICE_NAME: general-service
      GRPC_PORT: 50053
      DB_NAME: user_preference_db
    volumes:
      - ../../microServices/general-service:/app
      - /app/node_modules
    networks:
      - aiot-network
    depends_on:
      consul:
        condition: service_healthy
      aiot-mysqldb:
        condition: service_healthy
      aiot-redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50053"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # 監控服務 (Monitoring Services) - 可選
  # ==========================================================================

  # Prometheus 監控
  prometheus:
    image: prom/prometheus:v2.45.0
    logging: *default-logging
    container_name: aiot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - aiot-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana 儀表板
  grafana:
    image: grafana/grafana:10.0.0
    logging: *default-logging
    container_name: aiot-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - aiot-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

# ==========================================================================
# 資料持久化 (Persistent Volumes)
# ==========================================================================
volumes:
  mysql_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  consul_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  kong_logs:
    driver: local

# ==========================================================================
# 網路配置 (Network Configuration)
# ==========================================================================
networks:
  aiot-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16