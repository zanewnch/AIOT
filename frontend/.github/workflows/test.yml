name: Frontend Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Type check
        working-directory: frontend
        run: npm run type-check

      - name: Run unit tests
        working-directory: frontend
        run: npm run test:unit

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-node${{ matrix.node-version }}
          path: frontend/coverage/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aiot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Start mock backend services
        run: |
          # 在背景啟動 Gateway Service 用於 integration 測試
          cd microServices/gateway-service
          npm ci
          npm run build
          npm start &
          sleep 10
          
          # 檢查服務是否啟動
          curl -f http://localhost:8000/api/health || exit 1

      - name: Run integration tests
        working-directory: frontend
        env:
          BACKEND_URL: http://localhost:8000
        run: npm run test:integration

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: frontend/coverage/

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
          echo "deb http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list
          apt-get update
          apt-get install -y google-chrome-stable

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Start services
        run: |
          # 啟動前端服務
          cd frontend
          npm run preview &
          FRONTEND_PID=$!
          sleep 5
          
          # 啟動後端服務（如果需要）
          cd ../microServices/gateway-service
          npm ci
          npm run build
          npm start &
          BACKEND_PID=$!
          sleep 10
          
          # 檢查服務是否啟動
          curl -f http://localhost:4173 || exit 1
          curl -f http://localhost:8000/api/health || echo "Backend not available"
          
          # 儲存 PID 以便後續清理
          echo $FRONTEND_PID > /tmp/frontend.pid
          echo $BACKEND_PID > /tmp/backend.pid

      - name: Run E2E tests
        working-directory: frontend
        env:
          FRONTEND_URL: http://localhost:4173
          BACKEND_URL: http://localhost:8000
          HEADLESS: true
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/coverage/
            frontend/test-results/

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: frontend/screenshots/

      - name: Cleanup
        if: always()
        run: |
          if [ -f /tmp/frontend.pid ]; then
            kill $(cat /tmp/frontend.pid) || true
          fi
          if [ -f /tmp/backend.pid ]; then
            kill $(cat /tmp/backend.pid) || true
          fi

  coverage-report:
    name: Coverage Report
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          pattern: unit-test-results-*
          path: coverage/unit/
          merge-multiple: true

      - name: Download integration test coverage
        uses: actions/download-artifact@v4
        with:
          name: integration-test-results
          path: coverage/integration/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: coverage/
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  test-summary:
    name: Test Summary
    needs: [unit-tests, integration-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Test Results Summary
        run: |
          echo "## 測試結果摘要" >> $GITHUB_STEP_SUMMARY
          echo "| 測試類型 | 狀態 |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ 通過' || '❌ 失敗' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ 通過' || '❌ 失敗' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ 通過' || '❌ 失敗' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 所有測試都通過了！" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ 有測試失敗，請檢查詳細結果。" >> $GITHUB_STEP_SUMMARY
          fi