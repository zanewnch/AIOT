
> aiot@0.0.0 dev
> npx nodemon ./src/server.ts

[33m[nodemon] 3.1.10[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): src/**/*[39m
[33m[nodemon] watching extensions: ts,js,json[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 16:37:37.956 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 16:37:37.958 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 16:45:11.704 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 16:45:11.707 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 16:50:08.751 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 16:50:08.754 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 16:50:13.096 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 16:50:13.099 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 16:50:15.598 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 16:50:15.600 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 16:51:04.085 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 16:51:04.088 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 16:54:16.771 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 16:54:16.775 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 16:54:38.130 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 16:54:38.133 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 16:55:25.072 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 16:55:25.076 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 16:55:57.183 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 16:55:57.185 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 16:56:44.062 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 16:56:44.065 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 16:57:16.322 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 16:57:16.324 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:07:49.731 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:07:49.733 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
(node:87081) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 exit listeners added to [Bus]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
(Use `node --trace-warnings ...` to show where the warning was created)
2025-08-04 17:08:13.167 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:08:13.170 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:08:51.629 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:08:51.631 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:09:36.652 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:09:36.655 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:10:05.988 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:10:05.992 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:10:28.071 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:10:28.073 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:10:46.770 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:10:46.772 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:11:09.274 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:11:09.276 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:11:14.659 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:11:14.661 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:11:46.916 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:11:46.918 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:11:52.763 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:11:52.766 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:11:57.340 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:11:57.342 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:12:04.177 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:12:04.179 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:15:21.041 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:15:21.043 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:15:56.341 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:15:56.345 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:27:36.868 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:27:36.871 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:27:44.792 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:27:44.794 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:27:55.915 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:27:55.918 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:28:03.146 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:28:03.148 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:31:45.120 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:31:45.123 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:32:05.603 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:32:05.606 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:32:11.735 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:32:11.737 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:41:38.404 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:41:38.407 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:41:47.928 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:41:47.930 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:41:54.231 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:41:54.233 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:41:58.407 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:41:58.409 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:42:04.974 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:42:04.976 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:42:10.627 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:42:10.629 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:43:31.394 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:43:31.398 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:43:42.989 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:43:42.991 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:43:48.372 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:43:48.374 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:44:29.633 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:44:29.636 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 17:45:18.119 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 17:45:18.122 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DroneCommandController.js' imported from /home/user/GitHub/AIOT/be/src/routes/droneCommandRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300719037:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300719037:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300719037:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DroneCommandController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DroneCommandController.js' imported from /home/user/GitHub/AIOT/be/src/routes/droneCommandRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300721670:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300721670:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300721670:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DroneCommandController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DroneCommandController.js' imported from /home/user/GitHub/AIOT/be/src/routes/droneCommandRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300723819:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300723819:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300723819:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DroneCommandController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DroneStatusController.js' imported from /home/user/GitHub/AIOT/be/src/routes/droneStatusRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300726151:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300726151:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300726151:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DroneStatusController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300732466:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300732466:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300732466:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300890341:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300890341:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300890341:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300914572:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300914572:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300914572:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DroneStatusController.js' imported from /home/user/GitHub/AIOT/be/src/routes/droneStatusRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300957696:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300957696:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754300957696:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DroneStatusController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301060776:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301060776:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301060776:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DroneStatusController.js' imported from /home/user/GitHub/AIOT/be/src/routes/droneStatusRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301119080:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301119080:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301119080:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DroneStatusController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301149423:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301149423:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301149423:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301163559:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301163559:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301163559:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301172526:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301172526:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301172526:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
(node:87081) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 exit listeners added to [Bus]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionsArchiveController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionsArchiveRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301185994:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301185994:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301185994:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionsArchiveController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301200493:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301200493:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301200493:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301205570:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301205570:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301205570:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301210807:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301210807:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301210807:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301215999:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301215999:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301215999:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301222068:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301222068:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301222068:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DroneStatusArchiveController.js' imported from /home/user/GitHub/AIOT/be/src/routes/droneStatusArchiveRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301227555:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301227555:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301227555:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DroneStatusArchiveController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301231972:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301231972:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301231972:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301385888:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301385888:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301385888:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/droneCommandRoutes.js' imported from /home/user/GitHub/AIOT/be/src/routes/index.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301391043:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301391043:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301391043:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/droneCommandRoutes.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301391456:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301391456:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301391456:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/droneCommandsArchiveRoutes.js' imported from /home/user/GitHub/AIOT/be/src/routes/index.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301392515:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301392515:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301392515:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/droneCommandsArchiveRoutes.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/droneCommandsArchiveRoutes.js' imported from /home/user/GitHub/AIOT/be/src/routes/index.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301395047:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301395047:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301395047:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/droneCommandsArchiveRoutes.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/droneCommandsArchiveRoutes.js' imported from /home/user/GitHub/AIOT/be/src/routes/index.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301396529:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301396529:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301396529:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/droneCommandsArchiveRoutes.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/droneCommandsArchiveRoutes.js' imported from /home/user/GitHub/AIOT/be/src/routes/index.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301398569:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301398569:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301398569:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/droneCommandsArchiveRoutes.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/droneCommandsArchiveRoutes.js' imported from /home/user/GitHub/AIOT/be/src/routes/index.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301402874:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301402874:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301402874:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/droneCommandsArchiveRoutes.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DronePositionController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/dronePositionRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301429440:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301429440:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301429440:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DronePositionController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneStatusRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301444347:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301444347:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301444347:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneStatusRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301463167:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301463167:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301463167:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneStatusRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301464722:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301464722:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301464722:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DroneCommandController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneCommandRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301466606:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301466606:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301466606:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DroneCommandController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneStatusRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301468146:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301468146:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301468146:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneStatusRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301469930:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301469930:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301469930:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DroneCommandController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneCommandRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301471663:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301471663:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301471663:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DroneCommandController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/drone/DroneCommandsArchiveController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneCommandsArchiveRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301475269:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301475269:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301475269:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/drone/DroneCommandsArchiveController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneStatusRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301478162:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301478162:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301478162:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DronePositionsArchiveController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/dronePositionsArchiveRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301481752:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301481752:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301481752:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DronePositionsArchiveController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DroneCommandController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneCommandRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301488360:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301488360:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301488360:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DroneCommandController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneStatusRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301489075:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301489075:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301489075:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DroneStatusController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DroneCommandController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneCommandRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301489988:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301489988:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301489988:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DroneCommandController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/DronePositionsArchiveController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/dronePositionsArchiveRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301506063:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301506063:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301506063:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/DronePositionsArchiveController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/drone/DroneCommandsArchiveController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneCommandsArchiveRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301520097:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301520097:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301520097:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/drone/DroneCommandsArchiveController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/drone/DroneCommandsArchiveController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneCommandsArchiveRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301536372:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301536372:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301536372:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/drone/DroneCommandsArchiveController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/controllers/drone/DroneCommandsArchiveController.js' imported from /home/user/GitHub/AIOT/be/src/routes/drone/droneCommandsArchiveRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301551520:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301551520:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301551520:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/controllers/drone/DroneCommandsArchiveController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301557896:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301557896:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301557896:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301558574:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301558574:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301558574:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301559697:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301559697:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301559697:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301560563:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301560563:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301560563:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301561413:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301561413:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301561413:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301562755:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301562755:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301562755:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301563543:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301563543:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301563543:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301564138:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301564138:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301564138:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301564934:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301564934:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301564934:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301566016:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301566016:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301566016:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301566807:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301566807:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301566807:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DronePositionController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301568813:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301568813:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301568813:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301569522:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301569522:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301569522:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301575900:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301575900:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301575900:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DroneCommandService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DroneCommandController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301577718:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301577718:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301577718:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DroneCommandService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301580176:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301580176:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301580176:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/UserRepo.js' imported from /home/user/GitHub/AIOT/be/src/middlewares/AuthMiddleware.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301581898:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301581898:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301581898:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/UserRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DronePositionController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301693713:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301693713:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301693713:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DronePositionController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301702526:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301702526:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301702526:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DronePositionController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301709568:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301709568:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301709568:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DronePositionController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301722447:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301722447:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301722447:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DronePositionController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301744001:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301744001:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301744001:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DronePositionController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301753870:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301753870:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301753870:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DronePositionController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301762617:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301762617:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301762617:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DronePositionController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301771646:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301771646:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301771646:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
(node:87081) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 exit listeners added to [Bus]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DroneStatusService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DroneStatusController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301783360:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301783360:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301783360:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DroneStatusService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DronePositionController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301813490:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301813490:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301813490:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DronePositionController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301916149:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301916149:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301916149:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DronePositionService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DroneStatusService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DroneStatusController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301938864:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301938864:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301938864:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DroneStatusService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/configs/loggerConfig.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DroneStatusController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301947947:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301947947:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301947947:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/configs/loggerConfig.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DroneCommandService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DroneCommandController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301954286:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301954286:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301954286:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DroneCommandService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/services/DroneStatusArchiveService.js' imported from /home/user/GitHub/AIOT/be/src/controllers/drone/DroneStatusArchiveController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301963912:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301963912:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301963912:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/services/DroneStatusArchiveService.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/rbac/UserModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/rbac/UserRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301978661:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301978661:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754301978661:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/rbac/UserModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/rbac/UserModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/rbac/UserRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302171228:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302171228:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302171228:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/rbac/UserModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/rbac/UserModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/rbac/UserRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302233358:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302233358:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302233358:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/rbac/UserModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/rbac/UserModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/rbac/UserRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302260844:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302260844:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302260844:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/rbac/UserModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/services/repo/DronePositionsArchiveRepo.js' imported from /home/user/GitHub/AIOT/be/src/services/drone/DronePositionsArchiveService.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302291445:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302291445:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302291445:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/services/repo/DronePositionsArchiveRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/services/repo/DroneStatusArchiveRepo.js' imported from /home/user/GitHub/AIOT/be/src/services/drone/DroneStatusArchiveService.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302331691:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302331691:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302331691:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/services/repo/DroneStatusArchiveRepo.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/rbac/PermissionModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/rbac/PermissionRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302425988:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302425988:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302425988:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/rbac/PermissionModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/rbac/PermissionModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/rbac/PermissionRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302453942:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302453942:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302453942:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/rbac/PermissionModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DroneCommandRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302479960:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302479960:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302479960:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/DroneStatusArchiveModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DroneStatusArchiveRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302514565:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302514565:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302514565:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/DroneStatusArchiveModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/rbac/RoleToPermissionModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/rbac/RolePermissionRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302525048:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302525048:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302525048:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/rbac/RoleToPermissionModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/DronePositionModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DronePositionRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302535396:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302535396:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302535396:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/DronePositionModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/DronePositionModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DronePositionRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302548747:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302548747:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302548747:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/DronePositionModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/DroneCommandsArchiveModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DroneCommandsArchiveRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302579999:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302579999:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302579999:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/DroneCommandsArchiveModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/DronePositionModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DronePositionRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302606335:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302606335:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302606335:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/DronePositionModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/DronePositionsArchiveModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DronePositionsArchiveRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302616878:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302616878:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302616878:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/DronePositionsArchiveModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/repo/models/DroneStatusArchiveModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DroneStatusArchiveRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302624701:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302624701:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302624701:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/repo/models/DroneStatusArchiveModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:17:16.250 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 18:17:16.253 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/UserActivityModel.js' imported from /home/user/GitHub/AIOT/be/src/controllers/UserActivityController.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302808344:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302808344:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302808344:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/UserActivityModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/controllers/UserActivityController.js' imported from /home/user/GitHub/AIOT/be/src/routes/userActivityRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302818116:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302818116:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302818116:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/controllers/UserActivityController.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/userActivityRoutes.js' imported from /home/user/GitHub/AIOT/be/src/routes/userRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302826276:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302826276:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302826276:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/userActivityRoutes.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/userActivityRoutes.js' imported from /home/user/GitHub/AIOT/be/src/routes/userRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302850896:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302850896:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302850896:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/userActivityRoutes.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/userActivityRoutes.js' imported from /home/user/GitHub/AIOT/be/src/routes/userRoutes.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302854976:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302854976:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302854976:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/userActivityRoutes.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:21:09.347 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 18:21:09.350 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
2025-08-04 18:21:09.382 [AIOT-BE] ERROR: uncaughtException: userActivityRoutes is not defined
ReferenceError: userActivityRoutes is not defined
    at UserRoutes.setupUserRoutes (/home/user/GitHub/AIOT/be/src/routes/userRoutes.ts:47:44)
    at new UserRoutes (/home/user/GitHub/AIOT/be/src/routes/userRoutes.ts:36:10)
    at <anonymous> (/home/user/GitHub/AIOT/be/src/routes/userRoutes.ts:63:27)
    at ModuleJob.run (node:internal/modules/esm/module_job:329:25)
    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:644:26)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5) {"error":{},"stack":"ReferenceError: userActivityRoutes is not defined\n    at UserRoutes.setupUserRoutes (/home/user/GitHub/AIOT/be/src/routes/userRoutes.ts:47:44)\n    at new UserRoutes (/home/user/GitHub/AIOT/be/src/routes/userRoutes.ts:36:10)\n    at <anonymous> (/home/user/GitHub/AIOT/be/src/routes/userRoutes.ts:63:27)\n    at ModuleJob.run (node:internal/modules/esm/module_job:329:25)\n    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:644:26)\n    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)","exception":true,"date":"Mon Aug 04 2025 18:21:09 GMT+0800 (Taiwan Standard Time)","process":{"pid":61840,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":158535680,"heapTotal":65622016,"heapUsed":46940440,"external":6195524,"arrayBuffers":281033}},"os":{"loadavg":[2.01,1.08,0.84],"uptime":23193.98},"trace":[{"column":44,"file":"/home/user/GitHub/AIOT/be/src/routes/userRoutes.ts","function":"UserRoutes.setupUserRoutes","line":47,"method":"setupUserRoutes","native":false},{"column":10,"file":"/home/user/GitHub/AIOT/be/src/routes/userRoutes.ts","function":"new UserRoutes","line":36,"method":null,"native":false},{"column":27,"file":"/home/user/GitHub/AIOT/be/src/routes/userRoutes.ts","function":"<anonymous>","line":63,"method":null,"native":false},{"column":25,"file":"node:internal/modules/esm/module_job","function":"ModuleJob.run","line":329,"method":"run","native":false},{"column":26,"file":"node:internal/modules/esm/loader","function":"async onImport.tracePromise.__proto__","line":644,"method":"__proto__","native":false},{"column":5,"file":"node:internal/modules/run_main","function":"async asyncRunEntryPointWithESMLoader","line":117,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:21:14.431 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 18:21:14.433 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:21:19.490 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 18:21:19.493 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302930895:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302930895:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302930895:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302933121:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302933121:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302933121:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302933790:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302933790:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302933790:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302950644:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302950644:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302950644:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DronePositionModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302965344:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302965344:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302965344:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DronePositionModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302966027:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302966027:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302966027:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302967471:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302967471:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302967471:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302968910:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302968910:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302968910:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneStatusModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302971197:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302971197:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302971197:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneStatusModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302972021:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302972021:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754302972021:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303016690:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303016690:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303016690:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303041834:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303041834:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303041834:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/configs/dbConfig.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303053534:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303053534:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303053534:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js' imported from /home/user/GitHub/AIOT/be/src/services/drone/DroneCommandService.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303418478:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303418478:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303418478:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneCommandModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DronePositionsArchiveModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DronePositionsArchiveRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303534538:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303534538:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303534538:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DronePositionsArchiveModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DronePositionsArchiveModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DronePositionsArchiveRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303560410:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303560410:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303560410:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DronePositionsArchiveModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneStatusArchiveModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DroneStatusArchiveRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303577063:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303577063:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303577063:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneStatusArchiveModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DronePositionsArchiveModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DronePositionsArchiveRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303585680:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303585680:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303585680:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DronePositionsArchiveModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
(node:87081) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 exit listeners added to [Bus]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/models/DroneStatusArchiveModel.js' imported from /home/user/GitHub/AIOT/be/src/repo/drone/DroneStatusArchiveRepo.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303695634:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303695634:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303695634:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/models/DroneStatusArchiveModel.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:35:02.383 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
2025-08-04 18:35:02.385 [AIOT-BE] [32minfo[39m: ProgressService initialized with periodic cleanup every 5 minutes
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m

node:internal/modules/run_main:123
    triggerUncaughtException(
    ^
Error [ERR_MODULE_NOT_FOUND]: Cannot find module '/home/user/GitHub/AIOT/be/src/routes/progressRoutes.js' imported from /home/user/GitHub/AIOT/be/src/routes/index.ts
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:860:10)
    at defaultResolve (node:internal/modules/esm/resolve:984:11)
    at nextResolve (node:internal/modules/esm/hooks:748:28)
    at resolveBase (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303811459:2:3811)
    at async resolveDirectory (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303811459:2:4304)
    at async resolve (file:///home/user/GitHub/AIOT/be/node_modules/tsx/dist/esm/index.mjs?1754303811459:2:5422)
    at async nextResolve (node:internal/modules/esm/hooks:748:22)
    at async Hooks.resolve (node:internal/modules/esm/hooks:240:24)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///home/user/GitHub/AIOT/be/src/routes/progressRoutes.js'
}

Node.js v22.17.1
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:37:00.007 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-04 18:37:00.051 [AIOT-BE] ERROR: uncaughtException: progressRoutes is not defined
ReferenceError: progressRoutes is not defined
    at <anonymous> (/home/user/GitHub/AIOT/be/src/routes/index.ts:100:14)
    at ModuleJob.run (node:internal/modules/esm/module_job:329:25)
    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:644:26)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5) {"error":{},"stack":"ReferenceError: progressRoutes is not defined\n    at <anonymous> (/home/user/GitHub/AIOT/be/src/routes/index.ts:100:14)\n    at ModuleJob.run (node:internal/modules/esm/module_job:329:25)\n    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:644:26)\n    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)","exception":true,"date":"Mon Aug 04 2025 18:37:00 GMT+0800 (Taiwan Standard Time)","process":{"pid":75434,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":164786176,"heapTotal":69046272,"heapUsed":38394240,"external":6179333,"arrayBuffers":182922}},"os":{"loadavg":[1.64,0.8,0.68],"uptime":24225.44},"trace":[{"column":14,"file":"/home/user/GitHub/AIOT/be/src/routes/index.ts","function":"<anonymous>","line":100,"method":null,"native":false},{"column":25,"file":"node:internal/modules/esm/module_job","function":"ModuleJob.run","line":329,"method":"run","native":false},{"column":26,"file":"node:internal/modules/esm/loader","function":"async onImport.tracePromise.__proto__","line":644,"method":"__proto__","native":false},{"column":5,"file":"node:internal/modules/run_main","function":"async asyncRunEntryPointWithESMLoader","line":117,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:37:10.080 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:37:15.407 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:37:34.005 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:37:39.395 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:37:55.652 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:38:05.210 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:38:17.514 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:38:44.772 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:45:18.747 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:45:40.335 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:46:05.140 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:46:35.727 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:46:58.578 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:47:04.891 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:47:12.248 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:47:18.537 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:47:27.073 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:47:32.499 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:47:45.037 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:48:01.182 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:51:01.361 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 18:51:41.287 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:15:39.254 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:15:48.901 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:18:19.605 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:18:41.013 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
(node:87081) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 exit listeners added to [Bus]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
2025-08-04 19:18:53.286 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:19:14.670 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:19:32.650 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:19:42.277 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:20:18.904 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:21:54.539 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:22:05.902 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:23:23.998 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:23:49.217 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:23:59.793 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:24:08.246 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:24:20.059 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:24:43.607 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:24:49.703 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:25:14.181 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:25:29.203 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:25:45.867 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:25:54.296 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:26:06.055 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:27:58.517 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:28:07.506 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:28:12.240 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:28:19.785 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:30:25.944 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:30:33.169 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:30:53.604 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:31:02.249 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:31:10.043 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:31:16.700 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:31:25.383 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:31:34.725 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:31:54.045 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:32:14.230 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:32:28.804 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:32:48.931 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:33:58.564 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:34:12.617 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:36:39.204 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:36:44.409 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:36:50.969 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:36:54.821 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:37:52.022 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:38:04.837 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:38:16.565 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:38:27.366 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:38:35.312 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:40:04.820 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:40:14.825 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:41:24.322 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:41:38.800 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:41:42.645 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:41:47.577 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:41:52.853 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:42:09.740 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:42:24.910 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:42:36.912 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:42:42.803 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:43:05.027 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:43:10.613 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:50:32.244 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:51:01.902 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:51:25.082 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:51:38.173 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:52:55.000 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:53:08.489 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:53:23.389 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:54:58.594 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:55:10.087 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:55:17.141 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:56:59.358 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 19:57:15.401 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 20:10:50.886 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 20:10:57.025 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 20:11:03.352 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-04 20:11:03.391 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 20:11:29.992 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-04 20:11:30.031 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 20:11:34.353 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-04 20:11:34.389 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'archive_tasks' AND TABLE_SCHEMA = 'main_db'
Executing (default): CREATE TABLE IF NOT EXISTS `archive_tasks` (`id` BIGINT auto_increment , `job_type` ENUM('positions', 'commands', 'status') NOT NULL, `table_name` VARCHAR(255) NOT NULL, `archive_table_name` VARCHAR(255) NOT NULL, `date_range_start` DATETIME NOT NULL, `date_range_end` DATETIME NOT NULL, `batch_id` VARCHAR(255) NOT NULL, `total_records` BIGINT NOT NULL DEFAULT 0, `archived_records` BIGINT NOT NULL DEFAULT 0, `status` ENUM('pending', 'running', 'completed', 'failed') NOT NULL DEFAULT 'pending', `started_at` DATETIME, `completed_at` DATETIME, `error_message` TEXT, `created_by` VARCHAR(255) NOT NULL, `createdAt` DATETIME, `updatedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `archive_tasks` FROM `main_db`
Executing (default): ALTER TABLE `archive_tasks` ADD INDEX `archive_tasks_status_job_type` (`status`, `job_type`)
‚ùå App initialization failed Error
    at Query.run (/home/user/GitHub/AIOT/be/node_modules/sequelize/src/dialects/mysql/query.js:46:25)
    at <anonymous> (/home/user/GitHub/AIOT/be/node_modules/sequelize/src/sequelize.js:650:28)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async MySQLQueryInterface.addIndex (/home/user/GitHub/AIOT/be/node_modules/sequelize/src/dialects/abstract/query-interface.js:586:12)
    at async Function.sync (/home/user/GitHub/AIOT/be/node_modules/sequelize/src/model.js:1427:7)
    at async Sequelize.sync (/home/user/GitHub/AIOT/be/node_modules/sequelize/src/sequelize.js:825:9)
    at async App.initialize (/home/user/GitHub/AIOT/be/src/app.ts:262:7)
    at async Server.start (/home/user/GitHub/AIOT/be/src/server.ts:143:7) {
  name: 'SequelizeDatabaseError',
  parent: Error: Duplicate key name 'archive_tasks_status_job_type'
      at Packet.asError (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/packets/packet.js:740:17)
      at Query.execute (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/commands/command.js:29:26)
      at Connection.handlePacket (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/base/connection.js:475:34)
      at PacketParser.onPacket (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/base/connection.js:93:12)
      at PacketParser.executeStart (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/packet_parser.js:75:16)
      at Socket.<anonymous> (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/base/connection.js:100:25)
      at Socket.emit (node:events:518:28)
      at addChunk (node:internal/streams/readable:561:12)
      at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
      at Readable.push (node:internal/streams/readable:392:5) {
    code: 'ER_DUP_KEYNAME',
    errno: 1061,
    sqlState: '42000',
    sqlMessage: "Duplicate key name 'archive_tasks_status_job_type'",
    sql: 'ALTER TABLE `archive_tasks` ADD INDEX `archive_tasks_status_job_type` (`status`, `job_type`)',
    parameters: undefined
  },
  original: Error: Duplicate key name 'archive_tasks_status_job_type'
      at Packet.asError (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/packets/packet.js:740:17)
      at Query.execute (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/commands/command.js:29:26)
      at Connection.handlePacket (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/base/connection.js:475:34)
      at PacketParser.onPacket (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/base/connection.js:93:12)
      at PacketParser.executeStart (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/packet_parser.js:75:16)
      at Socket.<anonymous> (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/base/connection.js:100:25)
      at Socket.emit (node:events:518:28)
      at addChunk (node:internal/streams/readable:561:12)
      at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
      at Readable.push (node:internal/streams/readable:392:5) {
    code: 'ER_DUP_KEYNAME',
    errno: 1061,
    sqlState: '42000',
    sqlMessage: "Duplicate key name 'archive_tasks_status_job_type'",
    sql: 'ALTER TABLE `archive_tasks` ADD INDEX `archive_tasks_status_job_type` (`status`, `job_type`)',
    parameters: undefined
  },
  sql: 'ALTER TABLE `archive_tasks` ADD INDEX `archive_tasks_status_job_type` (`status`, `job_type`)',
  parameters: {}
}
‚ùå Server startup failed Error
    at Query.run (/home/user/GitHub/AIOT/be/node_modules/sequelize/src/dialects/mysql/query.js:46:25)
    at <anonymous> (/home/user/GitHub/AIOT/be/node_modules/sequelize/src/sequelize.js:650:28)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async MySQLQueryInterface.addIndex (/home/user/GitHub/AIOT/be/node_modules/sequelize/src/dialects/abstract/query-interface.js:586:12)
    at async Function.sync (/home/user/GitHub/AIOT/be/node_modules/sequelize/src/model.js:1427:7)
    at async Sequelize.sync (/home/user/GitHub/AIOT/be/node_modules/sequelize/src/sequelize.js:825:9)
    at async App.initialize (/home/user/GitHub/AIOT/be/src/app.ts:262:7)
    at async Server.start (/home/user/GitHub/AIOT/be/src/server.ts:143:7) {
  name: 'SequelizeDatabaseError',
  parent: Error: Duplicate key name 'archive_tasks_status_job_type'
      at Packet.asError (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/packets/packet.js:740:17)
      at Query.execute (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/commands/command.js:29:26)
      at Connection.handlePacket (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/base/connection.js:475:34)
      at PacketParser.onPacket (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/base/connection.js:93:12)
      at PacketParser.executeStart (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/packet_parser.js:75:16)
      at Socket.<anonymous> (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/base/connection.js:100:25)
      at Socket.emit (node:events:518:28)
      at addChunk (node:internal/streams/readable:561:12)
      at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
      at Readable.push (node:internal/streams/readable:392:5) {
    code: 'ER_DUP_KEYNAME',
    errno: 1061,
    sqlState: '42000',
    sqlMessage: "Duplicate key name 'archive_tasks_status_job_type'",
    sql: 'ALTER TABLE `archive_tasks` ADD INDEX `archive_tasks_status_job_type` (`status`, `job_type`)',
    parameters: undefined
  },
  original: Error: Duplicate key name 'archive_tasks_status_job_type'
      at Packet.asError (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/packets/packet.js:740:17)
      at Query.execute (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/commands/command.js:29:26)
      at Connection.handlePacket (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/base/connection.js:475:34)
      at PacketParser.onPacket (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/base/connection.js:93:12)
      at PacketParser.executeStart (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/packet_parser.js:75:16)
      at Socket.<anonymous> (/home/user/GitHub/AIOT/be/node_modules/mysql2/lib/base/connection.js:100:25)
      at Socket.emit (node:events:518:28)
      at addChunk (node:internal/streams/readable:561:12)
      at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
      at Readable.push (node:internal/streams/readable:392:5) {
    code: 'ER_DUP_KEYNAME',
    errno: 1061,
    sqlState: '42000',
    sqlMessage: "Duplicate key name 'archive_tasks_status_job_type'",
    sql: 'ALTER TABLE `archive_tasks` ADD INDEX `archive_tasks_status_job_type` (`status`, `job_type`)',
    parameters: undefined
  },
  sql: 'ALTER TABLE `archive_tasks` ADD INDEX `archive_tasks_status_job_type` (`status`, `job_type`)',
  parameters: {}
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 20:26:54.937 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-04 20:26:54.970 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'archive_tasks' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `archive_tasks` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-04 20:27:00.138 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-04 20:27:00.169 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'archive_tasks' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `archive_tasks` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_preferences' AND TABLE_SCHEMA = 'main_db'
Executing (default): CREATE TABLE IF NOT EXISTS `user_preferences` (`id` BIGINT auto_increment , `userId` BIGINT NOT NULL, `theme` ENUM('light', 'dark', 'auto') NOT NULL, `language` VARCHAR(10) NOT NULL, `timezone` VARCHAR(50) NOT NULL, `autoSave` TINYINT(1) NOT NULL DEFAULT true, `notifications` TINYINT(1) NOT NULL DEFAULT true, `createdAt` DATETIME, `updatedAt` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `user_preferences` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:19:00.468 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:19:00.501 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'archive_tasks' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `archive_tasks` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_preferences' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_preferences` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:19:19.069 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:19:19.108 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'archive_tasks' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `archive_tasks` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_preferences' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_preferences` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:20:01.903 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:20:01.941 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `users` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_roles' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_roles` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'role_permissions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `role_permissions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drones_status' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drones_status` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_commands_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_commands_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_positions_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_positions_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'drone_status_archive' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `drone_status_archive` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'archive_tasks' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `archive_tasks` FROM `main_db`
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'user_preferences' AND TABLE_SCHEMA = 'main_db'
Executing (default): SHOW INDEX FROM `user_preferences` FROM `main_db`
‚úÖ Database synced
Redis Client Connected
Redis Client Ready
‚úÖ Redis connected
‚ùå Failed to create RabbitMQ channel: Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå App initialization failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
‚ùå Server startup failed Error: getaddrinfo EAI_AGAIN aiot-rabbitmq
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26) {
  errno: -3001,
  code: 'EAI_AGAIN',
  syscall: 'getaddrinfo',
  hostname: 'aiot-rabbitmq'
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:20:19.440 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:20:19.471 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:20:19.570 [AIOT-BE] ERROR: uncaughtException: DroneCommandQueueModel is not defined
ReferenceError: DroneCommandQueueModel is not defined
    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:439:22)
    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)
    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22) {"error":{},"stack":"ReferenceError: DroneCommandQueueModel is not defined\n    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:439:22)\n    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)\n    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)","exception":true,"date":"Tue Aug 05 2025 01:20:19 GMT+0800 (Taiwan Standard Time)","process":{"pid":93740,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":171614208,"heapTotal":69984256,"heapUsed":49762632,"external":6130554,"arrayBuffers":215980}},"os":{"loadavg":[1.58,0.76,0.57],"uptime":49310.51},"trace":[{"column":22,"file":"/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts","function":"BelongsToAssociation.BelongsTo.foreignKey","line":439,"method":"foreignKey","native":false},{"column":21,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js","function":"BelongsToAssociation.getAssociatedClass","line":10,"method":"getAssociatedClass","native":false},{"column":38,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js","function":"BelongsToAssociation.getSequelizeOptions","line":16,"method":"getSequelizeOptions","native":false},{"column":45,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":51,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:20:34.611 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:20:34.648 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:20:34.723 [AIOT-BE] ERROR: uncaughtException: DroneCommandQueueModel has not been defined
Error: DroneCommandQueueModel has not been defined
    at Sequelize.model (/home/user/GitHub/AIOT/be/node_modules/sequelize/src/sequelize.js:483:13)
    at Sequelize.model (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:30:26)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:52:46
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)
    at createSequelizeInstance (/home/user/GitHub/AIOT/be/src/configs/dbConfig.ts:82:10) {"error":{},"stack":"Error: DroneCommandQueueModel has not been defined\n    at Sequelize.model (/home/user/GitHub/AIOT/be/node_modules/sequelize/src/sequelize.js:483:13)\n    at Sequelize.model (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:30:26)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:52:46\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)\n    at createSequelizeInstance (/home/user/GitHub/AIOT/be/src/configs/dbConfig.ts:82:10)","exception":true,"date":"Tue Aug 05 2025 01:20:34 GMT+0800 (Taiwan Standard Time)","process":{"pid":94065,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":164864000,"heapTotal":69984256,"heapUsed":50376904,"external":6130554,"arrayBuffers":215980}},"os":{"loadavg":[1.71,0.83,0.59],"uptime":49325.66},"trace":[{"column":13,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize/src/sequelize.js","function":"Sequelize.model","line":483,"method":"model","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.model","line":30,"method":"model","native":false},{"column":46,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":52,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false},{"column":10,"file":"/home/user/GitHub/AIOT/be/src/configs/dbConfig.ts","function":"createSequelizeInstance","line":82,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:20:49.049 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:20:49.085 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:20:49.169 [AIOT-BE] ERROR: uncaughtException: DroneCommandQueueModel is not defined
ReferenceError: DroneCommandQueueModel is not defined
    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:439:22)
    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)
    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22) {"error":{},"stack":"ReferenceError: DroneCommandQueueModel is not defined\n    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:439:22)\n    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)\n    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)","exception":true,"date":"Tue Aug 05 2025 01:20:49 GMT+0800 (Taiwan Standard Time)","process":{"pid":94442,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":167112704,"heapTotal":70979584,"heapUsed":48914496,"external":6114170,"arrayBuffers":199596}},"os":{"loadavg":[2.05,0.93,0.63],"uptime":49340.1},"trace":[{"column":22,"file":"/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts","function":"BelongsToAssociation.BelongsTo.foreignKey","line":439,"method":"foreignKey","native":false},{"column":21,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js","function":"BelongsToAssociation.getAssociatedClass","line":10,"method":"getAssociatedClass","native":false},{"column":38,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js","function":"BelongsToAssociation.getSequelizeOptions","line":16,"method":"getSequelizeOptions","native":false},{"column":45,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":51,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:21:04.460 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:21:04.489 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:21:04.562 [AIOT-BE] ERROR: uncaughtException: require is not defined in ES module scope, you can use import instead
ReferenceError: require is not defined in ES module scope, you can use import instead
    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)
    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)
    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22) {"error":{},"stack":"ReferenceError: require is not defined in ES module scope, you can use import instead\n    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)\n    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)\n    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)","exception":true,"date":"Tue Aug 05 2025 01:21:04 GMT+0800 (Taiwan Standard Time)","process":{"pid":94979,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":165060608,"heapTotal":69984256,"heapUsed":49650552,"external":6122362,"arrayBuffers":207788}},"os":{"loadavg":[2.36,1.05,0.67],"uptime":49355.5},"trace":[{"column":59,"file":"/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts","function":"BelongsToAssociation.BelongsTo.foreignKey","line":440,"method":"foreignKey","native":false},{"column":21,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js","function":"BelongsToAssociation.getAssociatedClass","line":10,"method":"getAssociatedClass","native":false},{"column":38,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js","function":"BelongsToAssociation.getSequelizeOptions","line":16,"method":"getSequelizeOptions","native":false},{"column":45,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":51,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:22:23.520 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:22:23.569 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:22:23.712 [AIOT-BE] ERROR: uncaughtException: require is not defined in ES module scope, you can use import instead
ReferenceError: require is not defined in ES module scope, you can use import instead
    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)
    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)
    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22) {"error":{},"stack":"ReferenceError: require is not defined in ES module scope, you can use import instead\n    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)\n    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)\n    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)","exception":true,"date":"Tue Aug 05 2025 01:22:23 GMT+0800 (Taiwan Standard Time)","process":{"pid":96626,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":167215104,"heapTotal":69984256,"heapUsed":49369592,"external":6122362,"arrayBuffers":207788}},"os":{"loadavg":[1.34,1.01,0.69],"uptime":49434.62},"trace":[{"column":59,"file":"/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts","function":"BelongsToAssociation.BelongsTo.foreignKey","line":440,"method":"foreignKey","native":false},{"column":21,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js","function":"BelongsToAssociation.getAssociatedClass","line":10,"method":"getAssociatedClass","native":false},{"column":38,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js","function":"BelongsToAssociation.getSequelizeOptions","line":16,"method":"getSequelizeOptions","native":false},{"column":45,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":51,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
(node:87081) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 exit listeners added to [Bus]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
2025-08-05 01:23:07.072 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:23:07.135 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:23:07.366 [AIOT-BE] ERROR: uncaughtException: require is not defined in ES module scope, you can use import instead
ReferenceError: require is not defined in ES module scope, you can use import instead
    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)
    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)
    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22) {"error":{},"stack":"ReferenceError: require is not defined in ES module scope, you can use import instead\n    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)\n    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)\n    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)","exception":true,"date":"Tue Aug 05 2025 01:23:07 GMT+0800 (Taiwan Standard Time)","process":{"pid":97638,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":166510592,"heapTotal":69984256,"heapUsed":49559672,"external":6122362,"arrayBuffers":207788}},"os":{"loadavg":[1.35,1.11,0.74],"uptime":49478.27},"trace":[{"column":59,"file":"/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts","function":"BelongsToAssociation.BelongsTo.foreignKey","line":440,"method":"foreignKey","native":false},{"column":21,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js","function":"BelongsToAssociation.getAssociatedClass","line":10,"method":"getAssociatedClass","native":false},{"column":38,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js","function":"BelongsToAssociation.getSequelizeOptions","line":16,"method":"getSequelizeOptions","native":false},{"column":45,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":51,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:23:23.885 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:23:23.935 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:23:24.100 [AIOT-BE] ERROR: uncaughtException: require is not defined in ES module scope, you can use import instead
ReferenceError: require is not defined in ES module scope, you can use import instead
    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)
    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)
    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22) {"error":{},"stack":"ReferenceError: require is not defined in ES module scope, you can use import instead\n    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)\n    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)\n    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)","exception":true,"date":"Tue Aug 05 2025 01:23:24 GMT+0800 (Taiwan Standard Time)","process":{"pid":98029,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":166395904,"heapTotal":70246400,"heapUsed":49382496,"external":6122362,"arrayBuffers":207788}},"os":{"loadavg":[1.65,1.18,0.77],"uptime":49495},"trace":[{"column":59,"file":"/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts","function":"BelongsToAssociation.BelongsTo.foreignKey","line":440,"method":"foreignKey","native":false},{"column":21,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js","function":"BelongsToAssociation.getAssociatedClass","line":10,"method":"getAssociatedClass","native":false},{"column":38,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js","function":"BelongsToAssociation.getSequelizeOptions","line":16,"method":"getSequelizeOptions","native":false},{"column":45,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":51,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:23:40.143 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:23:40.239 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:23:40.448 [AIOT-BE] ERROR: uncaughtException: require is not defined in ES module scope, you can use import instead
ReferenceError: require is not defined in ES module scope, you can use import instead
    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)
    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)
    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22) {"error":{},"stack":"ReferenceError: require is not defined in ES module scope, you can use import instead\n    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)\n    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)\n    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)","exception":true,"date":"Tue Aug 05 2025 01:23:40 GMT+0800 (Taiwan Standard Time)","process":{"pid":98525,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":166014976,"heapTotal":69984256,"heapUsed":49759160,"external":6122362,"arrayBuffers":207788}},"os":{"loadavg":[1.84,1.24,0.79],"uptime":49511.35},"trace":[{"column":59,"file":"/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts","function":"BelongsToAssociation.BelongsTo.foreignKey","line":440,"method":"foreignKey","native":false},{"column":21,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js","function":"BelongsToAssociation.getAssociatedClass","line":10,"method":"getAssociatedClass","native":false},{"column":38,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js","function":"BelongsToAssociation.getSequelizeOptions","line":16,"method":"getSequelizeOptions","native":false},{"column":45,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":51,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:27:54.113 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:27:54.146 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:27:54.234 [AIOT-BE] ERROR: uncaughtException: require is not defined in ES module scope, you can use import instead
ReferenceError: require is not defined in ES module scope, you can use import instead
    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)
    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)
    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22) {"error":{},"stack":"ReferenceError: require is not defined in ES module scope, you can use import instead\n    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)\n    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)\n    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)","exception":true,"date":"Tue Aug 05 2025 01:27:54 GMT+0800 (Taiwan Standard Time)","process":{"pid":3875,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":164855808,"heapTotal":70246400,"heapUsed":49798776,"external":6114170,"arrayBuffers":199596}},"os":{"loadavg":[1.59,1.3,0.93],"uptime":49765.08},"trace":[{"column":59,"file":"/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts","function":"BelongsToAssociation.BelongsTo.foreignKey","line":440,"method":"foreignKey","native":false},{"column":21,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js","function":"BelongsToAssociation.getAssociatedClass","line":10,"method":"getAssociatedClass","native":false},{"column":38,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js","function":"BelongsToAssociation.getSequelizeOptions","line":16,"method":"getSequelizeOptions","native":false},{"column":45,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":51,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:28:05.891 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:28:05.942 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:28:06.060 [AIOT-BE] ERROR: uncaughtException: require is not defined in ES module scope, you can use import instead
ReferenceError: require is not defined in ES module scope, you can use import instead
    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)
    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)
    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22) {"error":{},"stack":"ReferenceError: require is not defined in ES module scope, you can use import instead\n    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)\n    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)\n    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)","exception":true,"date":"Tue Aug 05 2025 01:28:06 GMT+0800 (Taiwan Standard Time)","process":{"pid":4187,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":164020224,"heapTotal":70246400,"heapUsed":50759040,"external":6114170,"arrayBuffers":199596}},"os":{"loadavg":[1.49,1.29,0.93],"uptime":49776.91},"trace":[{"column":59,"file":"/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts","function":"BelongsToAssociation.BelongsTo.foreignKey","line":440,"method":"foreignKey","native":false},{"column":21,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js","function":"BelongsToAssociation.getAssociatedClass","line":10,"method":"getAssociatedClass","native":false},{"column":38,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js","function":"BelongsToAssociation.getSequelizeOptions","line":16,"method":"getSequelizeOptions","native":false},{"column":45,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":51,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:29:16.317 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:29:16.349 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:29:16.433 [AIOT-BE] ERROR: uncaughtException: require is not defined in ES module scope, you can use import instead
ReferenceError: require is not defined in ES module scope, you can use import instead
    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)
    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)
    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22) {"error":{},"stack":"ReferenceError: require is not defined in ES module scope, you can use import instead\n    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)\n    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)\n    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)","exception":true,"date":"Tue Aug 05 2025 01:29:16 GMT+0800 (Taiwan Standard Time)","process":{"pid":5697,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":165679104,"heapTotal":70246400,"heapUsed":50309032,"external":6122362,"arrayBuffers":207788}},"os":{"loadavg":[0.65,1.07,0.87],"uptime":49847.26},"trace":[{"column":59,"file":"/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts","function":"BelongsToAssociation.BelongsTo.foreignKey","line":440,"method":"foreignKey","native":false},{"column":21,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js","function":"BelongsToAssociation.getAssociatedClass","line":10,"method":"getAssociatedClass","native":false},{"column":38,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js","function":"BelongsToAssociation.getSequelizeOptions","line":16,"method":"getSequelizeOptions","native":false},{"column":45,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":51,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:29:42.836 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:29:42.869 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:29:42.968 [AIOT-BE] ERROR: uncaughtException: require is not defined in ES module scope, you can use import instead
ReferenceError: require is not defined in ES module scope, you can use import instead
    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)
    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)
    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22) {"error":{},"stack":"ReferenceError: require is not defined in ES module scope, you can use import instead\n    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)\n    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)\n    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)","exception":true,"date":"Tue Aug 05 2025 01:29:42 GMT+0800 (Taiwan Standard Time)","process":{"pid":6252,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":163741696,"heapTotal":70246400,"heapUsed":50852656,"external":6114170,"arrayBuffers":199596}},"os":{"loadavg":[0.67,1.03,0.86],"uptime":49873.79},"trace":[{"column":59,"file":"/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts","function":"BelongsToAssociation.BelongsTo.foreignKey","line":440,"method":"foreignKey","native":false},{"column":21,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js","function":"BelongsToAssociation.getAssociatedClass","line":10,"method":"getAssociatedClass","native":false},{"column":38,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js","function":"BelongsToAssociation.getSequelizeOptions","line":16,"method":"getSequelizeOptions","native":false},{"column":45,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":51,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `tsx src/server.ts ./src/server.ts`[39m
2025-08-05 01:31:19.579 [AIOT-BE] [32minfo[39m: üöÄ Winston Logger initialized {
  "environment": "development",
  "logLevel": "debug",
  "consoleOutput": true,
  "fileOutput": true,
  "logDirectory": "/home/user/GitHub/AIOT/be/logs"
}
‚úÖ Swagger specification loaded from YAML file
2025-08-05 01:31:19.613 [AIOT-BE] [32minfo[39m: Ê≠∏Ê™î‰ªªÂãôË∑ØÁî±ÂàùÂßãÂåñÂÆåÊàê {
  "routes": [
    "GET /data",
    "GET /statistics",
    "GET /",
    "GET /:id",
    "POST /batch",
    "POST /:id/execute",
    "POST /:id/cancel",
    "POST /:id/retry",
    "POST /",
    "DELETE /cleanup"
  ]
}
2025-08-05 01:31:19.695 [AIOT-BE] ERROR: uncaughtException: require is not defined in ES module scope, you can use import instead
ReferenceError: require is not defined in ES module scope, you can use import instead
    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)
    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)
    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45
    at Array.forEach (<anonymous>)
    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26
    at Array.forEach (<anonymous>)
    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)
    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)
    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22) {"error":{},"stack":"ReferenceError: require is not defined in ES module scope, you can use import instead\n    at BelongsToAssociation.BelongsTo.foreignKey (/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts:440:59)\n    at BelongsToAssociation.getAssociatedClass (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js:10:21)\n    at BelongsToAssociation.getSequelizeOptions (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js:16:38)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:51:45\n    at Array.forEach (<anonymous>)\n    at /home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:50:26\n    at Array.forEach (<anonymous>)\n    at Sequelize.associateModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:46:16)\n    at Sequelize.addModels (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:38:14)\n    at new Sequelize (/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js:20:22)","exception":true,"date":"Tue Aug 05 2025 01:31:19 GMT+0800 (Taiwan Standard Time)","process":{"pid":8413,"uid":1001,"gid":1001,"cwd":"/home/user/GitHub/AIOT/be","execPath":"/home/user/.nvm/versions/node/v22.17.1/bin/node","version":"v22.17.1","argv":["/home/user/.nvm/versions/node/v22.17.1/bin/node","/home/user/GitHub/AIOT/be/src/server.ts","./src/server.ts"],"memoryUsage":{"rss":165601280,"heapTotal":70246400,"heapUsed":50877320,"external":6122362,"arrayBuffers":207788}},"os":{"loadavg":[1.45,1.12,0.91],"uptime":49970.5},"trace":[{"column":59,"file":"/home/user/GitHub/AIOT/be/src/models/drone/DroneCommandModel.ts","function":"BelongsToAssociation.BelongsTo.foreignKey","line":440,"method":"foreignKey","native":false},{"column":21,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/shared/base-association.js","function":"BelongsToAssociation.getAssociatedClass","line":10,"method":"getAssociatedClass","native":false},{"column":38,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/associations/belongs-to/belongs-to-association.js","function":"BelongsToAssociation.getSequelizeOptions","line":16,"method":"getSequelizeOptions","native":false},{"column":45,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":51,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":26,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":null,"line":50,"method":null,"native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":16,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.associateModels","line":46,"method":"associateModels","native":false},{"column":14,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"Sequelize.addModels","line":38,"method":"addModels","native":false},{"column":22,"file":"/home/user/GitHub/AIOT/be/node_modules/sequelize-typescript/dist/sequelize/sequelize/sequelize.js","function":"new Sequelize","line":20,"method":null,"native":false}]}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
