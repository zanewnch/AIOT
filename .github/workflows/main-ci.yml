name: Main CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Ê∏¨Ë©¶Ê®°ÂºèÈÅ∏Êìá'
        required: true
        default: 'full'
        type: choice
        options:
        - quick
        - standard
        - full

env:
  CI: true
  NODE_ENV: test
  PYTHON_ENV: test

jobs:
  # Á¨¨‰∏ÄÈöéÊÆµÔºöÈùúÊÖãÊ™¢Êü• (ÊúÄÂø´ÈÄüÁöÑÈ©óË≠â)
  static-checks:
    name: Static Code Analysis
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Quick syntax check for TypeScript files
        run: |
          echo "üîç Âø´ÈÄüË™ûÊ≥ïÊ™¢Êü•..."
          find . -name "*.ts" -not -path "./node_modules/*" | head -50 | while read file; do
            if ! npx tsc --noEmit --skipLibCheck "$file" 2>/dev/null; then
              echo "‚ùå TypeScript Ë™ûÊ≥ïÈåØË™§: $file"
              exit 1
            fi
          done
          echo "‚úÖ TypeScript Ë™ûÊ≥ïÊ™¢Êü•ÈÄöÈÅé"
      
      - name: Quick Python syntax check
        run: |
          echo "üêç Âø´ÈÄü Python Ë™ûÊ≥ïÊ™¢Êü•..."
          find . -name "*.py" -not -path "./node_modules/*" -not -path "./*venv*" | head -20 | while read file; do
            if ! python -m py_compile "$file" 2>/dev/null; then
              echo "‚ùå Python Ë™ûÊ≥ïÈåØË™§: $file"
              exit 1
            fi
          done
          echo "‚úÖ Python Ë™ûÊ≥ïÊ™¢Êü•ÈÄöÈÅé"
      
      - name: Collect static check results
        run: |
          mkdir -p ci-reports/static
          echo "{
            \"check_type\": \"static_analysis\",
            \"status\": \"success\",
            \"timestamp\": \"$(date -Iseconds)\",
            \"checks\": {
              \"typescript_syntax\": \"passed\",
              \"python_syntax\": \"passed\"
            }
          }" > ci-reports/static/static-checks-result.json

  # Á¨¨‰∫åÈöéÊÆµÔºö‰∏¶Ë°åÊ∏¨Ë©¶Âü∑Ë°å
  microservices-test:
    name: Microservices Tests
    needs: static-checks
    if: ${{ !failure() && (github.event.inputs.test_mode != 'quick' || github.event.inputs.test_mode == '') }}
    uses: ./.github/workflows/microservices-test.yml
  
  frontend-test:
    name: Frontend Tests  
    needs: static-checks
    if: ${{ !failure() && (github.event.inputs.test_mode != 'quick' || github.event.inputs.test_mode == '') }}
    uses: ./.github/workflows/frontend-test.yml
  
  python-services-test:
    name: Python Services Tests
    needs: static-checks
    if: ${{ !failure() && (github.event.inputs.test_mode == 'full') }}
    uses: ./.github/workflows/python-services-test.yml

  # Á¨¨‰∏âÈöéÊÆµÔºöÊ∏¨Ë©¶Â†±ÂëäÁîüÊàê
  generate-test-report:
    name: Generate Test Report
    needs: [static-checks, microservices-test, frontend-test, python-services-test]
    if: always()
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts/
        continue-on-error: true
      
      - name: Collect and consolidate results
        run: |
          echo "üìä Êï¥ÂêàÊâÄÊúâÊ∏¨Ë©¶ÁµêÊûú..."
          mkdir -p ci-reports/final
          
          # Êî∂ÈõÜÈùúÊÖãÊ™¢Êü•ÁµêÊûú
          if [ -f ci-reports/static/static-checks-result.json ]; then
            cp ci-reports/static/static-checks-result.json ci-reports/final/
          fi
          
          # Êî∂ÈõÜÊâÄÊúâÂÖ∂‰ªñÊ∏¨Ë©¶ÁµêÊûú
          find test-artifacts/ -name "*-result.json" -exec cp {} ci-reports/final/ \; 2>/dev/null || true
          
          # Áµ±Ë®àÁ∏ΩÈ´îÁµêÊûú
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0
          
          for result_file in ci-reports/final/*-result.json; do
            if [ -f "$result_file" ]; then
              TOTAL_TESTS=$((TOTAL_TESTS + 1))
              if grep -q '"status": "success"' "$result_file"; then
                PASSED_TESTS=$((PASSED_TESTS + 1))
              else
                FAILED_TESTS=$((FAILED_TESTS + 1))
              fi
            fi
          done
          
          # ÁîüÊàêÊúÄÁµÇÊëòË¶Å
          cat > ci-reports/final/summary.json << EOF
          {
            "total_tests": $TOTAL_TESTS,
            "passed_tests": $PASSED_TESTS,
            "failed_tests": $FAILED_TESTS,
            "success_rate": $(( TOTAL_TESTS > 0 ? (PASSED_TESTS * 100) / TOTAL_TESTS : 0 )),
            "timestamp": "$(date -Iseconds)",
            "test_mode": "${{ github.event.inputs.test_mode || 'standard' }}"
          }
          EOF
          
          echo "‚úÖ Ê∏¨Ë©¶ÁµêÊûúÊï¥ÂêàÂÆåÊàê"
          echo "üìä Á∏ΩÊ∏¨Ë©¶Êï∏: $TOTAL_TESTS"
          echo "‚úÖ ÈÄöÈÅé: $PASSED_TESTS"  
          echo "‚ùå Â§±Êïó: $FAILED_TESTS"
      
      - name: Generate HTML Report
        run: |
          echo "üèóÔ∏è ÁîüÊàêÊúÄÁµÇ HTML Ê∏¨Ë©¶Â†±Âëä..."
          
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
          REPORT_FILE="ci-reports/final-report.html"
          
          # ËÆÄÂèñÊëòË¶ÅÊï∏Êìö
          if [ -f ci-reports/final/summary.json ]; then
            TOTAL=$(grep -o '"total_tests": [0-9]*' ci-reports/final/summary.json | cut -d':' -f2 | tr -d ' ')
            PASSED=$(grep -o '"passed_tests": [0-9]*' ci-reports/final/summary.json | cut -d':' -f2 | tr -d ' ')
            FAILED=$(grep -o '"failed_tests": [0-9]*' ci-reports/final/summary.json | cut -d':' -f2 | tr -d ' ')
            SUCCESS_RATE=$(grep -o '"success_rate": [0-9]*' ci-reports/final/summary.json | cut -d':' -f2 | tr -d ' ')
          else
            TOTAL=0; PASSED=0; FAILED=0; SUCCESS_RATE=0
          fi
          
          # ÁîüÊàê HTML Â†±Âëä
          cat > "$REPORT_FILE" << EOF
          <!DOCTYPE html>
          <html lang="zh-TW">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>AIOT CI/CD Pipeline Â†±Âëä</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f8f9fa; }
                  .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
                  .header { background: linear-gradient(135deg, #2196F3 0%, #21CBF3 100%); color: white; padding: 40px 30px; border-radius: 12px; margin-bottom: 30px; text-align: center; box-shadow: 0 4px 20px rgba(33, 150, 243, 0.3); }
                  .header h1 { font-size: 32px; margin-bottom: 10px; }
                  .header .subtitle { font-size: 16px; opacity: 0.9; }
                  .summary-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
                  .summary-card { background: white; padding: 25px; border-radius: 12px; text-align: center; box-shadow: 0 2px 10px rgba(0,0,0,0.1); transition: transform 0.2s; }
                  .summary-card:hover { transform: translateY(-2px); }
                  .summary-card.success { border-top: 4px solid #4CAF50; }
                  .summary-card.danger { border-top: 4px solid #F44336; }
                  .summary-card.info { border-top: 4px solid #2196F3; }
                  .summary-card.warning { border-top: 4px solid #FF9800; }
                  .summary-card .icon { font-size: 40px; margin-bottom: 15px; }
                  .summary-card .number { font-size: 36px; font-weight: bold; margin: 15px 0; }
                  .summary-card .label { font-size: 16px; color: #666; }
                  .details { background: white; padding: 30px; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .details h2 { font-size: 24px; margin-bottom: 20px; color: #333; }
                  .test-item { display: flex; align-items: center; justify-content: space-between; padding: 15px 0; border-bottom: 1px solid #eee; }
                  .test-item:last-child { border-bottom: none; }
                  .test-name { font-weight: 500; }
                  .test-status { padding: 6px 12px; border-radius: 20px; font-size: 12px; font-weight: bold; text-transform: uppercase; }
                  .test-status.passed { background: #E8F5E8; color: #2E7D2E; }
                  .test-status.failed { background: #FFEBEE; color: #C62828; }
                  .footer { text-align: center; margin-top: 30px; padding: 20px; color: #666; }
                  .progress-bar { width: 100%; height: 8px; background: #eee; border-radius: 4px; overflow: hidden; margin: 15px 0; }
                  .progress-fill { height: 100%; background: linear-gradient(90deg, #4CAF50, #8BC34A); transition: width 0.3s ease; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üöÄ AIOT CI/CD Pipeline</h1>
                      <div class="subtitle">Ëá™ÂãïÂåñÊ∏¨Ë©¶ËàáÈÉ®ÁΩ≤Â†±Âëä ‚Ä¢ $TIMESTAMP</div>
                  </div>
                  
                  <div class="summary-grid">
                      <div class="summary-card success">
                          <div class="icon">‚úÖ</div>
                          <div class="number">$PASSED</div>
                          <div class="label">Ê∏¨Ë©¶ÈÄöÈÅé</div>
                      </div>
                      <div class="summary-card danger">
                          <div class="icon">‚ùå</div>
                          <div class="number">$FAILED</div>
                          <div class="label">Ê∏¨Ë©¶Â§±Êïó</div>
                      </div>
                      <div class="summary-card info">
                          <div class="icon">üìä</div>
                          <div class="number">$TOTAL</div>
                          <div class="label">Á∏ΩÊ∏¨Ë©¶Êï∏</div>
                      </div>
                      <div class="summary-card $([ $SUCCESS_RATE -ge 80 ] && echo "success" || echo "warning")">
                          <div class="icon">üìà</div>
                          <div class="number">$SUCCESS_RATE%</div>
                          <div class="label">ÊàêÂäüÁéá</div>
                          <div class="progress-bar">
                              <div class="progress-fill" style="width: $SUCCESS_RATE%"></div>
                          </div>
                      </div>
                  </div>
                  
                  <div class="details">
                      <h2>üìã Ë©≥Á¥∞Ê∏¨Ë©¶ÁµêÊûú</h2>
          EOF
          
          # Ê∑ªÂä†Ë©≥Á¥∞Ê∏¨Ë©¶ÁµêÊûú
          for result_file in ci-reports/final/*-result.json; do
            if [ -f "$result_file" ] && [ "$(basename "$result_file")" != "summary.json" ]; then
              SERVICE_NAME=$(basename "$result_file" -result.json | sed 's/-/ /g' | sed 's/\b\w/\U&/g')
              if grep -q '"status": "success"' "$result_file"; then
                STATUS_CLASS="passed"
                STATUS_TEXT="PASSED"
              else
                STATUS_CLASS="failed"  
                STATUS_TEXT="FAILED"
              fi
              
              cat >> "$REPORT_FILE" << EOF
                      <div class="test-item">
                          <div class="test-name">$SERVICE_NAME</div>
                          <div class="test-status $STATUS_CLASS">$STATUS_TEXT</div>
                      </div>
          EOF
            fi
          done
          
          # ÂÆåÊàê HTML
          cat >> "$REPORT_FILE" << 'EOF'
                  </div>
                  
                  <div class="footer">
                      <p>ü§ñ Ê≠§Â†±ÂëäÁî± AIOT CI/CD Pipeline Ëá™ÂãïÁîüÊàê</p>
                      <p><small>‰ΩøÁî® GitHub Actions + act Êú¨Âú∞Âü∑Ë°å</small></p>
                  </div>
              </div>
          </body>
          </html>
          EOF
          
          echo "‚úÖ HTML Â†±ÂëäÁîüÊàêÂÆåÊàê: $REPORT_FILE"
      
      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: final-ci-report
          path: ci-reports/
          retention-days: 30
      
      - name: Pipeline Summary
        run: |
          echo "## üöÄ AIOT CI/CD Pipeline Âü∑Ë°åÊëòË¶Å" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f ci-reports/final/summary.json ]; then
            TOTAL=$(grep -o '"total_tests": [0-9]*' ci-reports/final/summary.json | cut -d':' -f2 | tr -d ' ')
            PASSED=$(grep -o '"passed_tests": [0-9]*' ci-reports/final/summary.json | cut -d':' -f2 | tr -d ' ')
            FAILED=$(grep -o '"failed_tests": [0-9]*' ci-reports/final/summary.json | cut -d':' -f2 | tr -d ' ')
            SUCCESS_RATE=$(grep -o '"success_rate": [0-9]*' ci-reports/final/summary.json | cut -d':' -f2 | tr -d ' ')
            
            echo "| È†ÖÁõÆ | Êï∏Èáè |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|" >> $GITHUB_STEP_SUMMARY
            echo "| ‚úÖ ÈÄöÈÅéÊ∏¨Ë©¶ | $PASSED |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚ùå Â§±ÊïóÊ∏¨Ë©¶ | $FAILED |" >> $GITHUB_STEP_SUMMARY
            echo "| üìä Á∏ΩÊ∏¨Ë©¶Êï∏ | $TOTAL |" >> $GITHUB_STEP_SUMMARY
            echo "| üìà ÊàêÂäüÁéá | $SUCCESS_RATE% |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Êú¨Âú∞Êü•ÁúãÂÆåÊï¥Â†±Âëä" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# ÂïüÂãïÊú¨Âú∞ÊúçÂãôÂô®Êü•ÁúãÂ†±Âëä" >> $GITHUB_STEP_SUMMARY
          echo "python -m http.server 8080 --directory ci-reports" >> $GITHUB_STEP_SUMMARY
          echo "# ÁÄèË¶ΩÂô®ÈñãÂïü: http://localhost:8080/final-report.html" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY